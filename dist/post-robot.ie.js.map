{"version":3,"sources":["webpack://postRobot/webpack/universalModuleDefinition","webpack://postRobot/webpack/bootstrap","webpack://postRobot/./node_modules/cross-domain-utils/src/util.js","webpack://postRobot/./node_modules/cross-domain-utils/src/constants.js","webpack://postRobot/./node_modules/cross-domain-utils/src/utils.js","webpack://postRobot/./node_modules/zalgo-promise/src/utils.js","webpack://postRobot/./node_modules/zalgo-promise/src/exceptions.js","webpack://postRobot/./node_modules/zalgo-promise/src/flush.js","webpack://postRobot/./node_modules/zalgo-promise/src/promise.js","webpack://postRobot/./node_modules/@babel/runtime/helpers/esm/extends.js","webpack://postRobot/./node_modules/cross-domain-safe-weakmap/src/util.js","webpack://postRobot/./node_modules/cross-domain-safe-weakmap/src/weakmap.js","webpack://postRobot/./node_modules/belter/src/util.js","webpack://postRobot/./node_modules/cross-domain-safe-weakmap/src/native.js","webpack://postRobot/./node_modules/belter/src/dom.js","webpack://postRobot/./src/conf/config.js","webpack://postRobot/./src/conf/constants.js","webpack://postRobot/./src/global.js","webpack://postRobot/./src/lib/hello.js","webpack://postRobot/./src/lib/windows.js","webpack://postRobot/./node_modules/universal-serialize/src/constants.js","webpack://postRobot/./node_modules/universal-serialize/src/common.js","webpack://postRobot/./node_modules/universal-serialize/src/serialize.js","webpack://postRobot/./node_modules/universal-serialize/src/serializers/function.js","webpack://postRobot/./node_modules/universal-serialize/src/serializers/error.js","webpack://postRobot/./node_modules/universal-serialize/src/serializers/promise.js","webpack://postRobot/./node_modules/universal-serialize/src/serializers/regex.js","webpack://postRobot/./node_modules/universal-serialize/src/serializers/date.js","webpack://postRobot/./node_modules/universal-serialize/src/serializers/array.js","webpack://postRobot/./node_modules/universal-serialize/src/serializers/object.js","webpack://postRobot/./node_modules/universal-serialize/src/serializers/string.js","webpack://postRobot/./node_modules/universal-serialize/src/serializers/number.js","webpack://postRobot/./node_modules/universal-serialize/src/serializers/boolean.js","webpack://postRobot/./node_modules/universal-serialize/src/serializers/null.js","webpack://postRobot/./node_modules/universal-serialize/src/deserialize.js","webpack://postRobot/./src/bridge/common.js","webpack://postRobot/./src/bridge/parent.js","webpack://postRobot/./src/bridge/setup.js","webpack://postRobot/./src/bridge/bridge.js","webpack://postRobot/./src/bridge/child.js","webpack://postRobot/./src/serialize/window.js","webpack://postRobot/./src/serialize/function.js","webpack://postRobot/./src/serialize/serialize.js","webpack://postRobot/./src/serialize/promise.js","webpack://postRobot/./src/drivers/send/strategies.js","webpack://postRobot/./src/drivers/send/index.js","webpack://postRobot/./src/lib/compat.js","webpack://postRobot/./src/drivers/listeners.js","webpack://postRobot/./src/drivers/receive/types.js","webpack://postRobot/./src/drivers/receive/index.js","webpack://postRobot/./src/public/on.js","webpack://postRobot/./src/public/send.js","webpack://postRobot/./src/index.js","webpack://postRobot/./src/setup.js","webpack://postRobot/./src/clean.js","webpack://postRobot/./src/types.js"],"names":["root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","hasOwnProperty","p","s","isRegex","item","toString","PROTOCOL","MOCK","FILE","ABOUT","WILDCARD","WINDOW_TYPE","IFRAME","POPUP","IE_WIN_ACCESS_ERROR","isAboutProtocol","win","window","location","protocol","getParent","parent","err","getOpener","opener","canReadFromWindow","getActualDomain","Error","host","getDomain","domain","mockDomain","indexOf","isSameDomain","desc","getOwnPropertyDescriptor","isActuallySameDomain","isAncestorParent","child","childParent","result","push","getParents","getFrames","frames","len","length","frame","getAllChildFrames","_i3","_getFrames2","_i5","_getAllChildFrames2","getTop","top","_i7","_getAllChildFrames4","getAllFramesInWindow","concat","iframeWindows","iframeFrames","isWindowClosed","allowMock","closed","message","mockclosed","iframeIndex","collection","safeIndexOf","contentWindow","parentNode","doc","ownerDocument","documentElement","contains","isFrameWindowClosed","getUserAgent","navigator","mockUserAgent","userAgent","getFrameByName","winFrames","_i9","childFrame","isOpener","getAncestor","anyMatch","collection1","collection2","_i17","item1","_i19","isSameTopWindow","win1","win2","top1","top2","allFrames1","allFrames2","opener1","opener2","matchDomain","pattern","origin","Array","isArray","Boolean","match","JSON","stringify","some","subpattern","getDomainFromUrl","url","split","slice","join","isWindow","obj","Window","__cross_domain_utils_window_check__","isPromise","Promise","constructor","then","flushPromise","dispatchedErrors","possiblyUnhandledPromiseHandlers","activeCount","flushActive","promise","resolve","startActive","endActive","ZalgoPromise","handler","_this","resolved","rejected","errorHandled","error","handlers","dispatching","stack","isAsync","res","reject","_proto","prototype","dispatch","_this2","setTimeout","j","dispatchPossiblyUnhandledError","asyncReject","_this3","_loop","_handlers$i","onSuccess","onError","catch","undefined","finally","onFinally","try","timeout","time","_this4","clearTimeout","toPromise","TypeError","all","promises","count","results","_loop2","prom","hash","keys","map","items","method","onPossiblyUnhandledException","cancel","splice","context","args","apply","delay","flush","_extends","assign","target","arguments","source","objectIDs","counter","Date","now","CrossDomainSafeWeakMap","weakmap","values","Math","random","WeakMap","freeze","testWeakMap","testKey","set","hasNativeWeakMap","_cleanupClosedWindows","delete","isSafeToReadWrite","entry","writable","index","has","getOrSet","uniqueID","chars","replace","charAt","floor","str","btoa","Buffer","from","base64encode","toISOString","toLowerCase","memoizePromise","cache","memoizedPromiseFunction","_len2","_key2","subkey","val","uid","getObjectID","serializeArgs","reset","noop","stringifyError","level","newErr","MESSAGE_NAME","METHOD","HELLO","OPEN_TUNNEL","BRIDGE_NAME_PREFIX","SERIALIZATION_TYPE","CROSS_DOMAIN_ZALGO_PROMISE","CROSS_DOMAIN_FUNCTION","CROSS_DOMAIN_WINDOW","getGlobal","getObj","globalStore","defStore","store","storeKey","defVal","del","WildCard","getWildcard","global","WINDOW_WILDCARD","windowStore","winStore","getStore","getInstanceID","getHelloPromise","sayHello","_ref3","send","instanceID","_ref4","data","getWindowInstanceID","_ref5","_ref6","awaitWindowHello","markWindowKnown","TYPE","FUNCTION","ERROR","PROMISE","REGEX","DATE","ARRAY","OBJECT","STRING","NUMBER","BOOLEAN","NULL","UNDEFINED","isSerializedType","__type__","determineType","serializeType","type","__val__","SERIALIZER","_SERIALIZER","_ref","code","toJSON","defaultSerializers","DESERIALIZER","_DESERIALIZER","_ref2","RegExp","defaultDeserializers","needsBridgeForBrowser","needsBridgeForWin","needsBridgeForDomain","needsBridge","getBridgeName","sanitizedDomain","isBridge","documentBodyReady","document","body","interval","setInterval","clearInterval","registerRemoteWindow","findRemoteWindow","remoteWinPromise","registerRemoteSendMessage","sendMessage","remoteWin","remoteDomain","fireAndForget","rejectRemoteSendMessage","linkWindow","popupWindowsByName","popupWindowsByWin","_i2","_popupWindowsByName$k2","winName","details","setupBridge","windowOpen","on","receiveMessage","open","options","last","normalizeMockUrl","bridgePromise","bridge","winDetails","listenForOpenTunnel","openTunnelToParent","canary","tunnelWindows","parentWindow","id","_tunnelWindows$keys2","cleanTunnelWindows","addTunnelWindow","tunnelWindow","setupOpenTunnelToParent","openTunnelToOpener","cleanupProxyWindows","idToProxyWindow","_idToProxyWindow$keys2","shouldClean","getSerializedWindow","windowName","close","closeWindow","getName","focus","isClosed","setLocation","href","setName","assertSameDomain","frameElement","setAttribute","ProxyWindow","serializedWindow","actualWindow","isProxyWindow","actualWindowPromise","setWindow","getType","isPopup","isIframe","getWindow","awaitWindow","matchWindow","_this5","proxyInstanceID","knownWindowInstanceID","unwrap","serialize","toProxyWindow","deserialize","realWin","proxyWindow","addMethod","methodStore","proxyWindowMethods","lookupMethod","serializeFunction","destination","meth","methodSource","listenForFunctionCalls","__id__","__name__","serializeMessage","_serialize","serializers","serializer","serializePromise","deserializeMessage","_deserialize","deserializers","parse","deserializer","serializedPromise","serializedFunction","getDeserializedFunction","opts","crossDomainFunctionWrapper","_arguments","__origin__","__source__","deserializeFunction","_ref8","SEND_MESSAGE_STRATEGIES","_serializeMessage","serializedMessage","strategies","errors","strategyName","dom","forEach","postMessage","messagingChild","messagingParent","sendBridgeMessage","foreignGlobal","__DOMAIN_REGEX__","getResponseListener","deleteResponseListener","isResponseListenerErrored","getRequestListener","requestListeners","_i4","winQualifier","nameListeners","domainListeners","_i6","_domainListeners$__DO2","_domainListeners$__DO3","listener","regex","RECEIVE_MESSAGE_TYPES","_RECEIVE_MESSAGE_TYPE","sendResponse","ack","response","pathname","handleError","event","receivedMessages","parsedMessage","parseMessage","requestListener","addRequestListener","listenersCollection","_i8","_win2","_i10","_i12","_domain2","_i14","existingListener","regexListeners","regexListener","strDomain","errorHandler","once","responseTimeout","childTimeout","validateOptions","actualParent","_i15","_getFrames8","isAncestor","normalizeDomain","targetDomain","logName","responseListener","addResponseListener","reqPromises","markResponseListenerErrored","totalAckTimeout","isWindowKnown","totalResTimeout","ackTimeout","resTimeout","cancelled","max","loop","internalSerializeMessage","internalDeserializeMessage","setup","initialized","setupGlobalReceiveMessage","addEventListener","sourceElement","originalEvent","messageListener","removeEventListener","_ref7","initHello","destroy","responseListeners","_responseListeners$ke2","cancelResponseListeners","cleanUpWindow","_requestPromises$get2","__webpack_exports__","src_bridge","promise_ZalgoPromise","window_ProxyWindow","setup_serializeMessage","setup_deserializeMessage","setup_toProxyWindow","on_on","on_once","send_send","openBridge","bridges","bridgeFrames","iframe","createElement","src","openBridgeFrame","appendChild","linkUrl","hasBridge","destroyBridges","_bridgeFrames$keys2","removeChild"],"mappings":"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","file":"post-robot.ie.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"postRobot\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"postRobot\"] = factory();\n\telse\n\t\troot[\"postRobot\"] = factory();\n})((typeof self !== 'undefined' ? self : this), function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/* @flow */\n\nexport function isRegex(item : mixed) : boolean {\n    return Object.prototype.toString.call(item) === '[object RegExp]';\n}\n\n// eslint-disable-next-line no-unused-vars\nexport function noop(...args : Array<mixed>) {\n    // pass\n}\n","/* @flow */\n\nexport const PROTOCOL = {\n    MOCK:  ('mock:' : 'mock:'),\n    FILE:  ('file:' : 'file:'),\n    ABOUT: ('about:' : 'about:')\n};\n\nexport const WILDCARD = '*';\n\nexport const WINDOW_TYPE = {\n    IFRAME: ('iframe' : 'iframe'),\n    POPUP:  ('popup' : 'popup')\n};\n","/* @flow */\n/* eslint max-lines: 0 */\n\nimport { isRegex, noop } from './util';\nimport type { CrossDomainWindowType, SameDomainWindowType, DomainMatcher } from './types';\nimport { PROTOCOL, WILDCARD } from './constants';\n\nlet IE_WIN_ACCESS_ERROR = 'Call was rejected by callee.\\r\\n';\n\nexport function isFileProtocol(win : SameDomainWindowType = window) : boolean {\n    return win.location.protocol === PROTOCOL.FILE;\n}\n\nexport function isAboutProtocol(win : SameDomainWindowType = window) : boolean {\n    return win.location.protocol === PROTOCOL.ABOUT;\n}\n\nexport function getParent(win? : CrossDomainWindowType = window) : ?CrossDomainWindowType {\n\n    if (!win) {\n        return;\n    }\n\n    try {\n        if (win.parent && win.parent !== win) {\n            return win.parent;\n        }\n    } catch (err) {\n        // pass\n    }\n}\n\nexport function getOpener(win? : CrossDomainWindowType = window) : ?CrossDomainWindowType {\n\n    if (!win) {\n        return;\n    }\n\n    // Make sure we're not actually an iframe which has had window.open() called on us\n    if (getParent(win)) {\n        return;\n    }\n\n    try {\n        return win.opener;\n    } catch (err) {\n        // pass\n    }\n}\n\nexport function canReadFromWindow(win : CrossDomainWindowType | SameDomainWindowType) : boolean {\n    try {\n        // $FlowFixMe\n        noop(win && win.location && win.location.href);\n        return true;\n    } catch (err) {\n        // pass\n    }\n\n    return false;\n}\n\nexport function getActualDomain(win : ?SameDomainWindowType) : string {\n\n    win = win || window;\n\n    let location = win.location;\n\n    if (!location) {\n        throw new Error(`Can not read window location`);\n    }\n\n    let protocol = location.protocol;\n\n    if (!protocol) {\n        throw new Error(`Can not read window protocol`);\n    }\n\n    if (protocol === PROTOCOL.FILE) {\n        return `${ PROTOCOL.FILE }//`;\n    }\n\n    if (protocol === PROTOCOL.ABOUT) {\n\n        let parent = getParent(win);\n        if (parent && canReadFromWindow(parent)) {\n            // $FlowFixMe\n            return getActualDomain(parent);\n        }\n\n        return `${ PROTOCOL.ABOUT }//`;\n    }\n\n    let host = location.host;\n\n    if (!host) {\n        throw new Error(`Can not read window host`);\n    }\n\n    return `${ protocol }//${ host }`;\n}\n\nexport function getDomain(win : ?SameDomainWindowType) : string {\n\n    win = win || window;\n\n    let domain = getActualDomain(win);\n\n    if (domain && win.mockDomain && win.mockDomain.indexOf(PROTOCOL.MOCK) === 0) {\n        return win.mockDomain;\n    }\n\n    return domain;\n}\n\nexport function isBlankDomain(win : CrossDomainWindowType) : boolean {\n    try {\n        // $FlowFixMe\n        if (!win.location.href) {\n            return true;\n        }\n\n        if (win.location.href === 'about:blank') {\n            return true;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    return false;\n}\n\nexport function isActuallySameDomain(win : CrossDomainWindowType) : boolean {\n\n    try {\n        if (win === window) {\n            return true;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        let desc = Object.getOwnPropertyDescriptor(win, 'location');\n\n        if (desc && desc.enumerable === false) {\n            return false;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        // $FlowFixMe\n        if (isAboutProtocol(win) && canReadFromWindow(win)) {\n            return true;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        // $FlowFixMe\n        if (getActualDomain(win) === getActualDomain(window)) {\n            return true;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    return false;\n}\n\nexport function isSameDomain(win : CrossDomainWindowType | SameDomainWindowType) : boolean {\n\n    if (!isActuallySameDomain(win)) {\n        return false;\n    }\n\n    try {\n\n        if (win === window) {\n            return true;\n        }\n\n        // $FlowFixMe\n        if (isAboutProtocol(win) && canReadFromWindow(win)) {\n            return true;\n        }\n\n        // $FlowFixMe\n        if (getDomain(window) === getDomain(win)) {\n            return true;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    return false;\n}\n\n\nexport function assertSameDomain(win : CrossDomainWindowType | SameDomainWindowType) : SameDomainWindowType {\n    if (!isSameDomain(win)) {\n        throw new Error(`Expected window to be same domain`);\n    }\n\n    // $FlowFixMe\n    return win;\n}\n\nexport function getParents(win : CrossDomainWindowType) : Array<CrossDomainWindowType> {\n\n    let result = [];\n\n    try {\n\n        while (win.parent !== win) {\n            result.push(win.parent);\n            win = win.parent;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    return result;\n}\n\nexport function isAncestorParent(parent : CrossDomainWindowType, child : CrossDomainWindowType) : boolean {\n\n    if (!parent || !child) {\n        return false;\n    }\n\n    let childParent = getParent(child);\n\n    if (childParent) {\n        return childParent === parent;\n    }\n\n    if (getParents(child).indexOf(parent) !== -1) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function getFrames(win : CrossDomainWindowType) : Array<CrossDomainWindowType> {\n\n    let result = [];\n\n    let frames;\n\n    try {\n        frames = win.frames;\n    } catch (err) {\n        frames = win;\n    }\n\n    let len;\n\n    try {\n        len = frames.length;\n    } catch (err) {\n        // pass\n    }\n\n    if (len === 0) {\n        return result;\n    }\n\n    if (len) {\n        for (let i = 0; i < len; i++) {\n\n            let frame;\n\n            try {\n                frame = frames[i];\n            } catch (err) {\n                continue;\n            }\n\n            result.push(frame);\n        }\n\n        return result;\n    }\n\n    for (let i = 0; i < 100; i++) {\n        let frame;\n\n        try {\n            frame = frames[i];\n        } catch (err) {\n            return result;\n        }\n\n        if (!frame) {\n            return result;\n        }\n\n        result.push(frame);\n    }\n\n    return result;\n}\n\n\nexport function getAllChildFrames(win : CrossDomainWindowType) : Array<CrossDomainWindowType> {\n\n    let result = [];\n\n    for (let frame of getFrames(win)) {\n        result.push(frame);\n\n        for (let childFrame of getAllChildFrames(frame)) {\n            result.push(childFrame);\n        }\n    }\n\n    return result;\n}\n\nexport function getTop(win : CrossDomainWindowType) : ?CrossDomainWindowType {\n\n    if (!win) {\n        return;\n    }\n\n    try {\n        if (win.top) {\n            return win.top;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    if (getParent(win) === win) {\n        return win;\n    }\n\n    try {\n        if (isAncestorParent(window, win) && window.top) {\n            return window.top;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        if (isAncestorParent(win, window) && window.top) {\n            return window.top;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    for (let frame of getAllChildFrames(win)) {\n        try {\n            if (frame.top) {\n                return frame.top;\n            }\n        } catch (err) {\n            // pass\n        }\n\n        if (getParent(frame) === frame) {\n            return frame;\n        }\n    }\n}\n\nexport function getNextOpener(win? : CrossDomainWindowType = window) : ?CrossDomainWindowType {\n    return getOpener(getTop(win) || win);\n}\n\nexport function getUltimateTop(win? : CrossDomainWindowType = window) : CrossDomainWindowType {\n    let opener = getNextOpener(win);\n\n    if (opener) {\n        return getUltimateTop(opener);\n    }\n\n    return top;\n}\n\nexport function getAllFramesInWindow(win : CrossDomainWindowType) : Array<CrossDomainWindowType> {\n    let top = getTop(win);\n\n    if (!top) {\n        throw new Error(`Can not determine top window`);\n    }\n\n    return [ ...getAllChildFrames(top), top ];\n}\n\nexport function getAllWindows(win? : CrossDomainWindowType = window) : $ReadOnlyArray<CrossDomainWindowType> {\n    let frames = getAllFramesInWindow(win);\n    let opener = getNextOpener(win);\n\n    if (opener) {\n        return [ ...getAllWindows(opener), ...frames ];\n    } else {\n        return frames;\n    }\n}\n\nexport function isTop(win : CrossDomainWindowType) : boolean {\n    return win === getTop(win);\n}\n\nexport function isFrameWindowClosed(frame : HTMLIFrameElement) : boolean {\n\n    if (!frame.contentWindow) {\n        return true;\n    }\n\n    if (!frame.parentNode) {\n        return true;\n    }\n\n    let doc = frame.ownerDocument;\n\n    if (doc && doc.documentElement && !doc.documentElement.contains(frame)) {\n        return true;\n    }\n\n    return false;\n}\n\nfunction safeIndexOf<T>(collection : Array<T>, item : T) : number {\n    for (let i = 0; i < collection.length; i++) {\n\n        try {\n            if (collection[i] === item) {\n                return i;\n            }\n        } catch (err) {\n            // pass\n        }\n    }\n\n    return -1;\n}\n\nlet iframeWindows = [];\nlet iframeFrames = [];\n\nexport function isWindowClosed(win : CrossDomainWindowType, allowMock : boolean = true) : boolean {\n\n    try {\n        if (win === window) {\n            return false;\n        }\n    } catch (err) {\n        return true;\n    }\n\n    try {\n        if (!win) {\n            return true;\n        }\n\n    } catch (err) {\n        return true;\n    }\n\n    try {\n        if (win.closed) {\n            return true;\n        }\n\n    } catch (err) {\n\n        // I love you so much IE\n\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return false;\n        }\n\n        return true;\n    }\n\n\n    if (allowMock && isSameDomain(win)) {\n        try {\n            // $FlowFixMe\n            if (win.mockclosed) {\n                return true;\n            }\n        } catch (err) {\n            // pass\n        }\n    }\n\n    // Mobile safari\n\n    try {\n        if (!win.parent || !win.top) {\n            return true;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    // Yes, this actually happens in IE. win === win errors out when the window\n    // is from an iframe, and the iframe was removed from the page.\n\n    try {\n        noop(win === win); // eslint-disable-line no-self-compare\n    } catch (err) {\n        return true;\n    }\n\n    // IE orphaned frame\n\n    let iframeIndex = safeIndexOf(iframeWindows, win);\n\n    if (iframeIndex !== -1) {\n        let frame = iframeFrames[iframeIndex];\n\n        if (frame && isFrameWindowClosed(frame)) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nfunction cleanIframes() {\n    for (let i = 0; i < iframeWindows.length; i++) {\n        let closed = false;\n\n        try {\n            closed = iframeWindows[i].closed;\n        } catch (err) {\n            // pass\n        }\n\n        if (closed) {\n            iframeFrames.splice(i, 1);\n            iframeWindows.splice(i, 1);\n        }\n    }\n}\n\nexport function linkFrameWindow(frame : HTMLIFrameElement) {\n\n    cleanIframes();\n\n    if (frame && frame.contentWindow) {\n        try {\n            iframeWindows.push(frame.contentWindow);\n            iframeFrames.push(frame);\n        } catch (err) {\n            // pass\n        }\n    }\n}\n\nexport function getUserAgent(win : ?SameDomainWindowType) : string {\n    win = win || window;\n    return win.navigator.mockUserAgent || win.navigator.userAgent;\n}\n\n\nexport function getFrameByName(win : CrossDomainWindowType, name : string) : ?CrossDomainWindowType {\n\n    let winFrames = getFrames(win);\n\n    for (let childFrame of winFrames) {\n        try {\n            // $FlowFixMe\n            if (isSameDomain(childFrame) && childFrame.name === name && winFrames.indexOf(childFrame) !== -1) {\n                return childFrame;\n            }\n        } catch (err) {\n            // pass\n        }\n    }\n\n    try {\n        // $FlowFixMe\n        if (winFrames.indexOf(win.frames[name]) !== -1) {\n            // $FlowFixMe\n            return win.frames[name];\n        }\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        if (winFrames.indexOf(win[name]) !== -1) {\n            return win[name];\n        }\n    } catch (err) {\n        // pass\n    }\n}\n\nexport function findChildFrameByName(win : CrossDomainWindowType, name : string) : ?CrossDomainWindowType {\n\n    let frame = getFrameByName(win, name);\n\n    if (frame) {\n        return frame;\n    }\n\n    for (let childFrame of getFrames(win)) {\n        let namedFrame = findChildFrameByName(childFrame, name);\n\n        if (namedFrame) {\n            return namedFrame;\n        }\n    }\n}\n\nexport function findFrameByName(win : CrossDomainWindowType, name : string) : ?CrossDomainWindowType {\n\n    let frame;\n\n    frame = getFrameByName(win, name);\n\n    if (frame) {\n        return frame;\n    }\n\n    let top = getTop(win) || win;\n\n    return findChildFrameByName(top, name);\n}\n\nexport function isParent(win : CrossDomainWindowType, frame : CrossDomainWindowType) : boolean {\n\n    let frameParent = getParent(frame);\n\n    if (frameParent) {\n        return frameParent === win;\n    }\n\n    for (let childFrame of getFrames(win)) {\n        if (childFrame === frame) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nexport function isOpener(parent : CrossDomainWindowType, child : CrossDomainWindowType) : boolean {\n\n    return parent === getOpener(child);\n}\n\nexport function getAncestor(win? : CrossDomainWindowType = window) : ?CrossDomainWindowType {\n    win = win || window;\n\n    let opener = getOpener(win);\n\n    if (opener) {\n        return opener;\n    }\n\n    let parent = getParent(win);\n\n    if (parent) {\n        return parent;\n    }\n}\n\nexport function getAncestors(win : CrossDomainWindowType) : Array<CrossDomainWindowType> {\n\n    let results = [];\n\n    let ancestor = win;\n\n    while (ancestor) {\n        ancestor = getAncestor(ancestor);\n        if (ancestor) {\n            results.push(ancestor);\n        }\n    }\n\n    return results;\n}\n\n\nexport function isAncestor(parent : CrossDomainWindowType, child : CrossDomainWindowType) : boolean {\n\n    let actualParent = getAncestor(child);\n\n    if (actualParent) {\n        if (actualParent === parent) {\n            return true;\n        }\n\n        return false;\n    }\n\n    if (child === parent) {\n        return false;\n    }\n\n    if (getTop(child) === child) {\n        return false;\n    }\n\n    for (let frame of getFrames(parent)) {\n        if (frame === child) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nexport function isPopup() : boolean {\n    return Boolean(getOpener(window));\n}\n\nexport function isIframe() : boolean {\n    return Boolean(getParent(window));\n}\n\nexport function isFullpage() : boolean {\n    return Boolean(!isIframe() && !isPopup());\n}\n\nfunction anyMatch(collection1, collection2) : boolean {\n\n    for (let item1 of collection1) {\n        for (let item2 of collection2) {\n            if (item1 === item2) {\n                return true;\n            }\n        }\n    }\n\n    return false;\n}\n\nexport function getDistanceFromTop(win : CrossDomainWindowType = window) : number {\n    let distance = 0;\n    let parent = win;\n\n    while (parent) {\n        parent = getParent(parent);\n        if (parent) {\n            distance += 1;\n        }\n    }\n\n    return distance;\n}\n\nexport function getNthParent(win : CrossDomainWindowType, n : number = 1) : ?CrossDomainWindowType {\n    let parent = win;\n\n    for (let i = 0; i < n; i++) {\n        if (!parent) {\n            return;\n        }\n\n        parent = getParent(parent);\n    }\n\n    return parent;\n}\n\nexport function getNthParentFromTop(win : CrossDomainWindowType, n : number = 1) : ?CrossDomainWindowType {\n    return getNthParent(win, getDistanceFromTop(win) - n);\n}\n\nexport function isSameTopWindow(win1 : CrossDomainWindowType, win2 : CrossDomainWindowType) : boolean {\n\n    let top1 = getTop(win1) || win1;\n    let top2 = getTop(win2) || win2;\n\n    try {\n        if (top1 && top2) {\n            if (top1 === top2) {\n                return true;\n            }\n\n            return false;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    let allFrames1 = getAllFramesInWindow(win1);\n    let allFrames2 = getAllFramesInWindow(win2);\n\n    if (anyMatch(allFrames1, allFrames2)) {\n        return true;\n    }\n\n    let opener1 = getOpener(top1);\n    let opener2 = getOpener(top2);\n\n    if (opener1 && anyMatch(getAllFramesInWindow(opener1), allFrames2)) {\n        return false;\n    }\n\n    if (opener2 && anyMatch(getAllFramesInWindow(opener2), allFrames1)) {\n        return false;\n    }\n\n    return false;\n}\n\nexport function matchDomain(pattern : DomainMatcher, origin : DomainMatcher) : boolean {\n\n    if (typeof pattern === 'string') {\n\n        if (typeof origin === 'string') {\n            return pattern === WILDCARD || origin === pattern;\n        }\n\n        if (isRegex(origin)) {\n            return false;\n        }\n\n        if (Array.isArray(origin)) {\n            return false;\n        }\n    }\n\n    if (isRegex(pattern)) {\n\n        if (isRegex(origin)) {\n            return pattern.toString() === origin.toString();\n        }\n\n        if (Array.isArray(origin)) {\n            return false;\n        }\n\n        // $FlowFixMe\n        return Boolean(origin.match(pattern));\n    }\n\n    if (Array.isArray(pattern)) {\n\n        if (Array.isArray(origin)) {\n            return JSON.stringify(pattern) === JSON.stringify(origin);\n        }\n\n        if (isRegex(origin)) {\n            return false;\n        }\n\n        return pattern.some(subpattern => matchDomain(subpattern, origin));\n    }\n\n    return false;\n}\n\nexport function stringifyDomainPattern(pattern : DomainMatcher) : string {\n    if (Array.isArray(pattern)) {\n        return `(${ pattern.join(' | ') })`;\n    } else if (isRegex(pattern)) {\n        return `RegExp(${ pattern.toString() }`;\n    } else {\n        return pattern.toString();\n    }\n}\n\nexport function getDomainFromUrl(url : string) : string {\n\n    let domain;\n\n    if (url.match(/^(https?|mock|file):\\/\\//)) {\n        domain = url;\n    } else {\n        return getDomain();\n    }\n\n    domain = domain.split('/').slice(0, 3).join('/');\n\n    return domain;\n}\n\nexport function onCloseWindow(win : CrossDomainWindowType, callback : Function, delay : number = 1000, maxtime : number = Infinity) : { cancel : () => void } {\n\n    let timeout;\n\n    let check = () => {\n\n        if (isWindowClosed(win)) {\n\n            if (timeout) {\n                clearTimeout(timeout);\n            }\n\n            return callback();\n        }\n\n        if (maxtime <= 0) {\n            clearTimeout(timeout);\n        } else {\n            maxtime -= delay;\n            timeout = setTimeout(check, delay);\n        }\n    };\n\n    check();\n\n    return {\n        cancel() {\n            if (timeout) {\n                clearTimeout(timeout);\n            }\n        }\n    };\n}\n\n// eslint-disable-next-line complexity\nexport function isWindow(obj : Object) : boolean {\n\n    try {\n        if (obj === window) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (Object.prototype.toString.call(obj) === '[object Window]') {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (window.Window && obj instanceof window.Window) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (obj && obj.self === obj) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (obj && obj.parent === obj) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (obj && obj.top === obj) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (noop(obj === obj) === '__unlikely_value__') { // eslint-disable-line no-self-compare\n            return false;\n        }\n\n    } catch (err) {\n        return true;\n    }\n\n    try {\n        if (obj && obj.__cross_domain_utils_window_check__ === '__unlikely_value__') {\n            return false;\n        }\n\n    } catch (err) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function isBrowser() : boolean {\n    return (typeof window !== 'undefined' && typeof window.location !== 'undefined');\n}\n\nexport function isCurrentDomain(domain : string) : boolean {\n    if (!isBrowser()) {\n        return false;\n    }\n\n    return (getDomain() === domain);\n}\n\nexport function isMockDomain(domain : string) : boolean {\n    return domain.indexOf(PROTOCOL.MOCK) === 0;\n}\n\nexport function normalizeMockUrl(url : string) : string {\n    if (!isMockDomain(getDomainFromUrl(url))) {\n        return url;\n    }\n\n    if (!__TEST__) {\n        throw new Error(`Mock urls not supported out of test mode`);\n    }\n\n    return url.replace(/^mock:\\/\\/[^/]+/, getActualDomain(window));\n}\n\nexport function closeWindow(win : CrossDomainWindowType) {\n    try {\n        win.close();\n    } catch (err) {\n        // pass\n    }\n}\n","/* @flow */\n\nexport function isPromise(item : mixed) : boolean {\n    try {\n        if (!item) {\n            return false;\n        }\n\n        if (typeof Promise !== 'undefined' && item instanceof Promise) {\n            return true;\n        }\n\n        if (typeof window !== 'undefined' && window.Window && item instanceof window.Window) {\n            return false;\n        }\n\n        if (typeof window !== 'undefined' && window.constructor && item instanceof window.constructor) {\n            return false;\n        }\n\n        let toString = ({}).toString;\n\n        if (toString) {\n            let name = toString.call(item);\n\n            if (name === '[object Window]' || name === '[object global]' || name === '[object DOMWindow]') {\n                return false;\n            }\n        }\n\n        if (typeof item.then === 'function') {\n            return true;\n        }\n    } catch (err) {\n        return false;\n    }\n\n    return false;\n}\n","/* @flow */\n\nimport type { ZalgoPromise } from './promise';\n\nconst dispatchedErrors = [];\nconst possiblyUnhandledPromiseHandlers = [];\n\nexport function dispatchPossiblyUnhandledError<T>(err : mixed, promise : ZalgoPromise<T>) {\n\n    if (dispatchedErrors.indexOf(err) !== -1) {\n        return;\n    }\n\n    dispatchedErrors.push(err);\n\n    setTimeout(() => {\n        if (__DEBUG__) {\n            // $FlowFixMe\n            throw new Error(`${ err.stack || err.toString() }\\n\\nFrom promise:\\n\\n${ promise.stack }`);\n        }\n\n        throw err;\n    }, 1);\n\n    for (let j = 0; j < possiblyUnhandledPromiseHandlers.length; j++) {\n        // $FlowFixMe\n        possiblyUnhandledPromiseHandlers[j](err, promise);\n    }\n}\n\nexport function onPossiblyUnhandledException(handler : (mixed, promise? : ZalgoPromise<*>) => void) : { cancel : () => void } {\n    possiblyUnhandledPromiseHandlers.push(handler);\n\n    return {\n        cancel() {\n            possiblyUnhandledPromiseHandlers.splice(possiblyUnhandledPromiseHandlers.indexOf(handler), 1);\n        }\n    };\n}\n","/* @flow */\n\nimport type { ZalgoPromise } from './promise';\n\nlet activeCount = 0;\nlet flushPromise;\n\nfunction flushActive() {\n    if (!activeCount && flushPromise) {\n        const promise = flushPromise;\n        flushPromise = null;\n        promise.resolve();\n    }\n}\n\nexport function startActive() {\n    activeCount += 1;\n}\n\nexport function endActive() {\n    activeCount -= 1;\n    flushActive();\n}\n\nexport function awaitActive(Zalgo : Class<ZalgoPromise<*>>) : ZalgoPromise<void> { // eslint-disable-line no-undef\n    let promise = flushPromise = flushPromise || new Zalgo();\n    flushActive();\n    return promise;\n}\n","/* @flow */\n\nimport { isPromise } from './utils';\nimport { onPossiblyUnhandledException, dispatchPossiblyUnhandledError } from './exceptions';\nimport { startActive, endActive, awaitActive } from './flush';\n\nexport class ZalgoPromise<R : mixed> {\n\n    resolved : boolean\n    rejected : boolean\n    errorHandled : boolean\n    value : R\n    error : mixed\n    handlers : Array<{\n        promise : ZalgoPromise<*>,\n        onSuccess : void | (result : R) => mixed,\n        onError : void | (error : mixed) => mixed\n    }>\n    dispatching : boolean\n    stack : string\n\n    constructor(handler : ?(resolve : (result : R) => void, reject : (error : mixed) => void) => void) {\n\n        this.resolved = false;\n        this.rejected = false;\n        this.errorHandled = false;\n\n        this.handlers = [];\n\n        if (handler) {\n\n            let result;\n            let error;\n            let resolved = false;\n            let rejected = false;\n            let isAsync = false;\n\n            startActive();\n\n            try {\n                handler(res => {\n                    if (isAsync) {\n                        this.resolve(res);\n                    } else {\n                        resolved = true;\n                        result = res;\n                    }\n\n                }, err => {\n                    if (isAsync) {\n                        this.reject(err);\n                    } else {\n                        rejected = true;\n                        error = err;\n                    }\n                });\n\n            } catch (err) {\n                endActive();\n                this.reject(err);\n                return;\n            }\n\n            endActive();\n\n            isAsync = true;\n\n            if (resolved) {\n                // $FlowFixMe\n                this.resolve(result);\n            } else if (rejected) {\n                this.reject(error);\n            }\n        }\n\n        if (__DEBUG__) {\n            try {\n                throw new Error(`ZalgoPromise`);\n            } catch (err) {\n                this.stack = err.stack;\n            }\n        }\n    }\n\n    resolve(result : R) : ZalgoPromise<R> {\n        if (this.resolved || this.rejected) {\n            return this;\n        }\n\n        if (isPromise(result)) {\n            throw new Error('Can not resolve promise with another promise');\n        }\n\n        this.resolved = true;\n        this.value = result;\n        this.dispatch();\n\n        return this;\n    }\n\n    reject(error : mixed) : ZalgoPromise<R> {\n        if (this.resolved || this.rejected) {\n            return this;\n        }\n\n        if (isPromise(error)) {\n            throw new Error('Can not reject promise with another promise');\n        }\n\n        if (!error) {\n            // $FlowFixMe\n            let err = (error && typeof error.toString === 'function' ? error.toString() : Object.prototype.toString.call(error));\n            error = new Error(`Expected reject to be called with Error, got ${ err }`);\n        }\n\n        this.rejected = true;\n        this.error = error;\n\n        if (!this.errorHandled) {\n            setTimeout(() => {\n                if (!this.errorHandled) {\n                    dispatchPossiblyUnhandledError(error, this);\n                }\n            }, 1);\n        }\n\n        this.dispatch();\n\n        return this;\n    }\n\n    asyncReject(error : mixed) : ZalgoPromise<R> {\n        this.errorHandled = true;\n        this.reject(error);\n        return this;\n    }\n    \n    dispatch() {\n\n        let { dispatching, resolved, rejected, handlers } = this;\n\n        if (dispatching) {\n            return;\n        }\n\n        if (!resolved && !rejected) {\n            return;\n        }\n\n        this.dispatching = true;\n        startActive();\n\n        for (let i = 0; i < handlers.length; i++) {\n\n            let { onSuccess, onError, promise } = handlers[i];\n\n            let result;\n\n            if (resolved) {\n\n                try {\n                    result = onSuccess ? onSuccess(this.value) : this.value;\n                } catch (err) {\n                    promise.reject(err);\n                    continue;\n                }\n\n            } else if (rejected) {\n\n                if (!onError) {\n                    promise.reject(this.error);\n                    continue;\n                }\n\n                try {\n                    result = onError(this.error);\n                } catch (err) {\n                    promise.reject(err);\n                    continue;\n                }\n            }\n\n            if (result instanceof ZalgoPromise && (result.resolved || result.rejected)) {\n\n                if (result.resolved) {\n                    promise.resolve(result.value);\n                } else {\n                    promise.reject(result.error);\n                }\n\n                result.errorHandled = true;\n\n            } else if (isPromise(result)) {\n\n                if (result instanceof ZalgoPromise && (result.resolved || result.rejected)) {\n                    if (result.resolved) {\n                        promise.resolve(result.value);\n                    } else {\n                        promise.reject(result.error);\n                    }\n\n                } else {\n                    // $FlowFixMe\n                    result.then(res => {\n                        promise.resolve(res);\n                    }, err => {\n                        promise.reject(err);\n                    });\n                }\n\n            } else {\n\n                promise.resolve(result);\n            }\n        }\n\n        handlers.length = 0;\n        this.dispatching = false;\n        endActive();\n    }\n\n    then<X : mixed, Y : mixed>(onSuccess : void | (result : R) => (ZalgoPromise<X> | Y), onError : void | (error : mixed) => (ZalgoPromise<X> | Y)) : ZalgoPromise<X | Y> {\n\n        if (onSuccess && typeof onSuccess !== 'function' && !onSuccess.call) {\n            throw new Error('Promise.then expected a function for success handler');\n        }\n\n        if (onError && typeof onError !== 'function' && !onError.call) {\n            throw new Error('Promise.then expected a function for error handler');\n        }\n\n        let promise : ZalgoPromise<X | Y> = new ZalgoPromise();\n\n        this.handlers.push({\n            promise,\n            onSuccess,\n            onError\n        });\n\n        this.errorHandled = true;\n\n        this.dispatch();\n\n        return promise;\n    }\n\n    catch<X : mixed, Y : mixed>(onError : (error : mixed) => ZalgoPromise<X> | Y) : ZalgoPromise<X | Y> {\n        return this.then(undefined, onError);\n    }\n\n    finally(onFinally : () => mixed) : ZalgoPromise<R> {\n\n        if (onFinally && typeof onFinally !== 'function' && !onFinally.call) {\n            throw new Error('Promise.finally expected a function');\n        }\n\n        return this.then((result) => {\n            return ZalgoPromise.try(onFinally)\n                .then(() => {\n                    return result;\n                });\n        }, (err) => {\n            return ZalgoPromise.try(onFinally)\n                .then(() => {\n                    throw err;\n                });\n        });\n    }\n\n    timeout(time : number, err : ?Error) : ZalgoPromise<R> {\n\n        if (this.resolved || this.rejected) {\n            return this;\n        }\n\n        let timeout = setTimeout(() => {\n\n            if (this.resolved || this.rejected) {\n                return;\n            }\n\n            this.reject(err || new Error(`Promise timed out after ${ time }ms`));\n\n        }, time);\n\n        return this.then(result => {\n            clearTimeout(timeout);\n            return result;\n        });\n    }\n\n    // $FlowFixMe\n    toPromise() : Promise<R> {\n        // $FlowFixMe\n        if (typeof Promise === 'undefined') {\n            throw new TypeError(`Could not find Promise`);\n        }\n        // $FlowFixMe\n        return Promise.resolve(this); // eslint-disable-line compat/compat\n    }\n\n    static resolve<X : mixed>(value : X | ZalgoPromise<X>) : ZalgoPromise<X> {\n\n        if (value instanceof ZalgoPromise) {\n            return value;\n        }\n\n        if (isPromise(value)) {\n            // $FlowFixMe\n            return new ZalgoPromise((resolve, reject) => value.then(resolve, reject));\n        }\n\n        return new ZalgoPromise().resolve(value);\n    }\n\n    static reject(error : mixed) : ZalgoPromise<R> {\n        return new ZalgoPromise().reject(error);\n    }\n\n    static asyncReject(error : mixed) : ZalgoPromise<R> {\n        return new ZalgoPromise().asyncReject(error);\n    }\n\n    static all<X : Array<mixed>>(promises : X) : ZalgoPromise<$TupleMap<X, <Y>(ZalgoPromise<Y> | Y) => Y>> { // eslint-disable-line no-undef\n\n        let promise = new ZalgoPromise();\n        let count = promises.length;\n        let results = [];\n\n        if (!count) {\n            promise.resolve(results);\n            return promise;\n        }\n\n        for (let i = 0; i < promises.length; i++) {\n            let prom = promises[i];\n\n            if (prom instanceof ZalgoPromise) {\n                if (prom.resolved) {\n                    results[i] = prom.value;\n                    count -= 1;\n                    continue;\n                }\n            } else if (!isPromise(prom)) {\n                results[i] = prom;\n                count -= 1;\n                continue;\n            }\n\n            ZalgoPromise.resolve(prom).then(result => {\n                results[i] = result;\n                count -= 1;\n                if (count === 0) {\n                    promise.resolve(results);\n                }\n            }, err => {\n                promise.reject(err);\n            });\n        }\n\n        if (count === 0) {\n            promise.resolve(results);\n        }\n\n        return promise;\n    }\n\n    static hash<O : { [string] : * }>(promises : O) : ZalgoPromise<$ObjMap<O, <Y>(ZalgoPromise<Y> | Y) => Y>> { // eslint-disable-line no-undef\n        let result = {};\n        \n        return ZalgoPromise.all(Object.keys(promises).map(key => {\n            return ZalgoPromise.resolve(promises[key]).then(value => {\n                result[key] = value;\n            });\n        })).then(() => {\n            return result;\n        });\n    }\n\n    static map<T, X>(items : Array<T>, method : (T) => (ZalgoPromise<X> | X)) : ZalgoPromise<Array<X>> {\n        // $FlowFixMe\n        return ZalgoPromise.all(items.map(method));\n    }\n\n    static onPossiblyUnhandledException(handler : (err : mixed) => void) : { cancel : () => void } {\n        return onPossiblyUnhandledException(handler);\n    }\n\n    static try<X : mixed, Y : mixed, C : mixed, A : Array<mixed>>(method : (...args : A) => (ZalgoPromise<X> | Y), context : ?C, args : ?A) : ZalgoPromise<X | Y> {\n\n        if (method && typeof method !== 'function' && !method.call) {\n            throw new Error('Promise.try expected a function');\n        }\n\n        let result;\n\n        startActive();\n        \n        try {\n            // $FlowFixMe\n            result = method.apply(context, args || []);\n        } catch (err) {\n            endActive();\n            return ZalgoPromise.reject(err);\n        }\n\n        endActive();\n\n        return ZalgoPromise.resolve(result);\n    }\n\n    static delay(delay : number) : ZalgoPromise<void> {\n        return new ZalgoPromise(resolve => {\n            setTimeout(resolve, delay);\n        });\n    }\n\n    static isPromise(value : mixed) : boolean {\n\n        if (value && value instanceof ZalgoPromise) {\n            return true;\n        }\n\n        return isPromise(value);\n    }\n\n    static flush() : ZalgoPromise<void> {\n        return awaitActive(ZalgoPromise);\n    }\n}\n","export default function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}","/* @flow */\n\nexport function safeIndexOf<T>(collection : Array<T>, item : T) : number {\n    for (let i = 0; i < collection.length; i++) {\n\n        try {\n            if (collection[i] === item) {\n                return i;\n            }\n        } catch (err) {\n            // pass\n        }\n    }\n\n    return -1;\n}\n\n// eslint-disable-next-line no-unused-vars\nexport function noop(...args : Array<mixed>) {\n    // pass\n}\n","/* @flow */\n\nimport { isWindow, isWindowClosed } from 'cross-domain-utils/src';\n\nimport { hasNativeWeakMap } from './native';\nimport { noop, safeIndexOf } from './util';\n\nlet defineProperty = Object.defineProperty;\nlet counter = Date.now() % 1e9;\n\nexport class CrossDomainSafeWeakMap<K : Object, V : mixed> {\n\n    name : string\n    weakmap : WeakMap<K, V>\n    keys : Array<K>\n    values : Array<V>\n\n    constructor() {\n        counter += 1;\n\n        // eslint-disable-next-line no-bitwise\n        this.name = `__weakmap_${ Math.random() * 1e9 >>> 0 }__${ counter }`;\n\n        if (hasNativeWeakMap()) {\n            try {\n                this.weakmap = new WeakMap();\n            } catch (err) {\n                // pass\n            }\n        }\n\n        this.keys  = [];\n        this.values = [];\n    }\n\n    _cleanupClosedWindows() {\n\n        let weakmap = this.weakmap;\n        let keys = this.keys;\n\n        for (let i = 0; i < keys.length; i++) {\n            let value = keys[i];\n\n            if (isWindow(value) && isWindowClosed(value)) {\n\n                if (weakmap) {\n                    try {\n                        weakmap.delete(value);\n                    } catch (err) {\n                        // pass\n                    }\n                }\n\n                keys.splice(i, 1);\n                this.values.splice(i, 1);\n\n                i -= 1;\n            }\n        }\n    }\n\n    isSafeToReadWrite(key : K) : boolean {\n\n        if (isWindow(key)) {\n            return false;\n        }\n\n        try {\n            noop(key && key.self);\n            noop(key && key[this.name]);\n        } catch (err) {\n            return false;\n        }\n\n        return true;\n    }\n\n    set(key : K, value : V) {\n\n        if (!key) {\n            throw new Error(`WeakMap expected key`);\n        }\n\n        let weakmap = this.weakmap;\n\n        if (weakmap) {\n            try {\n                weakmap.set(key, value);\n            } catch (err) {\n                delete this.weakmap;\n            }\n        }\n\n        if (this.isSafeToReadWrite(key)) {\n            try {\n                let name = this.name;\n                let entry = key[name];\n\n                if (entry && entry[0] === key) {\n                    entry[1] = value;\n                } else {\n                    defineProperty(key, name, {\n                        value:    [ key, value ],\n                        writable: true\n                    });\n                }\n\n                return;\n\n            } catch (err) {\n                // pass\n            }\n        }\n\n        this._cleanupClosedWindows();\n\n        let keys = this.keys;\n        let values = this.values;\n        let index = safeIndexOf(keys, key);\n\n        if (index === -1) {\n            keys.push(key);\n            values.push(value);\n        } else {\n            values[index] = value;\n        }\n    }\n\n    get(key : K) : V | void {\n\n        if (!key) {\n            throw new Error(`WeakMap expected key`);\n        }\n\n        let weakmap = this.weakmap;\n\n        if (weakmap) {\n            try {\n                if (weakmap.has(key)) {\n                    return weakmap.get(key);\n                }\n                \n            } catch (err) {\n                delete this.weakmap;\n            }\n        }\n\n        if (this.isSafeToReadWrite(key)) {\n            try {\n                let entry = key[this.name];\n\n                if (entry && entry[0] === key) {\n                    return entry[1];\n                }\n\n                return;\n            } catch (err) {\n                // pass\n            }\n        }\n\n        this._cleanupClosedWindows();\n\n        let keys = this.keys;\n        let index = safeIndexOf(keys, key);\n\n        if (index === -1) {\n            return;\n        }\n\n        return this.values[index];\n    }\n\n    delete(key : K) {\n\n        if (!key) {\n            throw new Error(`WeakMap expected key`);\n        }\n\n        let weakmap = this.weakmap;\n\n        if (weakmap) {\n            try {\n                weakmap.delete(key);\n            } catch (err) {\n                delete this.weakmap;\n            }\n        }\n\n        if (this.isSafeToReadWrite(key)) {\n            try {\n                let entry = key[this.name];\n\n                if (entry && entry[0] === key) {\n                    entry[0] = entry[1] = undefined;\n                }\n            } catch (err) {\n                // pass\n            }\n        }\n\n        this._cleanupClosedWindows();\n\n        let keys = this.keys;\n        let index = safeIndexOf(keys, key);\n\n        if (index !== -1) {\n            keys.splice(index, 1);\n            this.values.splice(index, 1);\n        }\n    }\n\n    has(key : K) : boolean {\n\n        if (!key) {\n            throw new Error(`WeakMap expected key`);\n        }\n\n        let weakmap = this.weakmap;\n\n        if (weakmap) {\n            try {\n                if (weakmap.has(key)) {\n                    return true;\n                }\n            } catch (err) {\n                delete this.weakmap;\n            }\n        }\n\n        if (this.isSafeToReadWrite(key)) {\n            try {\n                let entry = key[this.name];\n\n                if (entry && entry[0] === key) {\n                    return true;\n                }\n\n                return false;\n            } catch (err) {\n                // pass\n            }\n        }\n\n        this._cleanupClosedWindows();\n\n        let index = safeIndexOf(this.keys, key);\n        return index !== -1;\n    }\n\n    getOrSet(key : K, getter : () => V) : V {\n        if (this.has(key)) {\n            // $FlowFixMe\n            return this.get(key);\n        }\n\n        let value = getter();\n        this.set(key, value);\n        return value;\n    }\n}\n","/* @flow */\n/* eslint max-lines: 0 */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { WeakMap } from 'cross-domain-safe-weakmap/src';\n\nimport type { CancelableType } from './types';\n\nexport function base64encode(str : string) : string {\n    if (typeof btoa === 'function') {\n        return btoa(str);\n    } else if (typeof Buffer !== 'undefined') {\n        return Buffer.from(str, 'utf8').toString('base64');\n    }\n\n    throw new Error(`Can not find window.btoa or Buffer`);\n}\n\nexport function base64decode(str : string) : string {\n    if (typeof window !== 'undefined' && typeof window.atob === 'function') {\n        return window.atob(str);\n    }\n\n    if (typeof Buffer !== 'undefined') {\n        return Buffer.from(str, 'base64').toString('utf8');\n    }\n\n    throw new Error(`Can not find window.atob or Buffer`);\n}\n\nexport function uniqueID() : string {\n\n    let chars = '0123456789abcdef';\n\n    let randomID = 'xxxxxxxxxx'.replace(/./g, () => {\n        return chars.charAt(Math.floor(Math.random() * chars.length));\n    });\n\n    let timeID = base64encode(\n        new Date().toISOString().slice(11, 19).replace('T', '.')\n    ).replace(/[^a-zA-Z0-9]/g, '').toLowerCase();\n\n    return `${ randomID }_${ timeID }`;\n}\n\nexport function getGlobal() : Object {\n    if (typeof window !== 'undefined') {\n        return window;\n    }\n    if (typeof global !== 'undefined') {\n        return global;\n    }\n    if (typeof __GLOBAL__ !== 'undefined') {\n        return __GLOBAL__;\n    }\n    throw new Error(`No global found`);\n}\n\nlet objectIDs;\n\nexport function getObjectID(obj : Object) : string {\n\n    objectIDs = objectIDs || new WeakMap();\n\n    if (obj === null || obj === undefined || (typeof obj !== 'object' && typeof obj !== 'function')) {\n        throw new Error(`Invalid object`);\n    }\n\n    let uid = objectIDs.get(obj);\n\n    if (!uid) {\n        uid = `${ typeof obj }:${ uniqueID() }`;\n        objectIDs.set(obj, uid);\n    }\n\n    return uid;\n}\n\nfunction serializeArgs(args : Array<mixed>) : string {\n    try {\n        return JSON.stringify(Array.prototype.slice.call(args), (subkey, val) => {\n            if (typeof val === 'function') {\n                return `memoize[${ getObjectID(val) }]`;\n            }\n            return val;\n        });\n    } catch (err) {\n        throw new Error(`Arguments not serializable -- can not be used to memoize`);\n    }\n}\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport function memoize<R>(method : (...args : Array<any>) => R, options : { time? : number, name? : string, thisNamespace? : boolean } = {}) : ((...args : Array<any>) => R) {\n    let cacheMap = new WeakMap();\n\n    // eslint-disable-next-line flowtype/no-weak-types\n    function memoizedFunction(...args : Array<any>) : R {\n        let cache = cacheMap.getOrSet(options.thisNamespace ? this : method, () => ({}));\n\n        let key : string = serializeArgs(args);\n\n        let cacheTime = options.time;\n        if (cache[key] && cacheTime && (Date.now() - cache[key].time) < cacheTime) {\n            delete cache[key];\n        }\n\n        if (cache[key]) {\n            return cache[key].value;\n        }\n\n        let time  = Date.now();\n        let value = method.apply(this, arguments);\n\n        cache[key] = { time, value };\n\n        return cache[key].value;\n    }\n\n    memoizedFunction.reset = () => {\n        cacheMap.delete(options.thisNamespace ? this : method);\n    };\n\n    if (options.name) {\n        memoizedFunction.displayName = `${ options.name }:memoized`;\n    }\n\n    return memoizedFunction;\n}\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport function memoizePromise<R>(method : (...args : Array<any>) => ZalgoPromise<R>) : ((...args : Array<any>) => ZalgoPromise<R>) {\n    let cache = {};\n\n    // eslint-disable-next-line flowtype/no-weak-types\n    function memoizedPromiseFunction(...args : Array<any>) : ZalgoPromise<R> {\n        let key : string = serializeArgs(args);\n\n        if (cache.hasOwnProperty(key)) {\n            return cache[key];\n        }\n\n        cache[key] = method.apply(this, arguments)\n            .finally(() => {\n                delete cache[key];\n            });\n\n        return cache[key];\n    }\n\n    memoizedPromiseFunction.reset = () => {\n        cache = {};\n    };\n\n    return memoizedPromiseFunction;\n}\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport function promisify<R>(method : (...args : Array<any>) => R, options : { name? : string } = {}) : ((...args : Array<any>) => ZalgoPromise<R>) {\n    function promisifiedFunction() : ZalgoPromise<R> {\n        return ZalgoPromise.try(method, this, arguments);\n    }\n\n    if (options.name) {\n        promisifiedFunction.displayName = `${ options.name }:promisified`;\n    }\n\n    return promisifiedFunction;\n}\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport function inlineMemoize<R>(method : (...args : Array<any>) => R, logic : (...args : Array<any>) => R, args : Array<any> = []) : R {\n    // $FlowFixMe\n    let cache = method.__inline_memoize_cache__ = method.__inline_memoize_cache__ || {};\n    let key = serializeArgs(args);\n\n    if (cache.hasOwnProperty(key)) {\n        return cache[key];\n    }\n    \n    let result = cache[key] = logic(...args);\n    return result;\n}\n\n// eslint-disable-next-line no-unused-vars\nexport function noop(...args : Array<mixed>) {\n    // pass\n}\n\nexport function once(method : Function) : Function {\n    let called = false;\n\n    return function onceFunction() : mixed {\n        if (!called) {\n            called = true;\n            return method.apply(this, arguments);\n        }\n    };\n}\n\nexport function hashStr(str : string) : number {\n    let hash = 0;\n    for (let i = 0; i < str.length; i++) {\n        hash += str[i].charCodeAt(0) * Math.pow((i % 10) + 1, 5);\n    }\n    return Math.floor(Math.pow(Math.sqrt(hash), 5));\n}\n\nexport function strHashStr(str : string) : string {\n    let hash = '';\n\n    for (let i = 0; i < str.length; i++) {\n        let total = (str[i].charCodeAt(0) * i);\n\n        if (str[i + 1]) {\n            total += (str[i + 1].charCodeAt(0) * (i - 1));\n        }\n\n        hash += String.fromCharCode(97 + (Math.abs(total) % 26));\n    }\n\n    return hash;\n}\n\nexport function match(str : string, pattern : RegExp) : ?string {\n    let regmatch = str.match(pattern);\n    if (regmatch) {\n        return regmatch[1];\n    }\n}\n\nexport function awaitKey<T: mixed>(obj : Object, key : string) : ZalgoPromise<T> {\n    return new ZalgoPromise(resolve => {\n\n        let value = obj[key];\n\n        if (value) {\n            return resolve(value);\n        }\n\n        delete obj[key];\n\n        Object.defineProperty(obj, key, {\n\n            configurable: true,\n\n            set(item) {\n                value = item;\n\n                if (value) {\n                    resolve(value);\n                }\n            },\n\n            get() : mixed {\n                return value;\n            }\n        });\n    });\n}\n\nexport function stringifyError(err : mixed, level : number = 1) : string {\n\n    if (level >= 3) {\n        return 'stringifyError stack overflow';\n    }\n\n    try {\n        if (!err) {\n            return `<unknown error: ${ Object.prototype.toString.call(err) }>`;\n        }\n\n        if (typeof err === 'string') {\n            return err;\n        }\n\n        if (err instanceof Error) {\n            let stack = err && err.stack;\n            let message = err && err.message;\n\n            if (stack && message) {\n                if (stack.indexOf(message) !== -1) {\n                    return stack;\n                } else {\n                    return `${ message }\\n${ stack }`;\n                }\n            } else if (stack) {\n                return stack;\n            } else if (message) {\n                return message;\n            }\n        }\n\n        if (err && err.toString && typeof err.toString === 'function') {\n            // $FlowFixMe\n            return err.toString();\n        }\n\n        return Object.prototype.toString.call(err);\n\n    } catch (newErr) { // eslint-disable-line unicorn/catch-error-name\n        return `Error while stringifying error: ${ stringifyError(newErr, level + 1) }`;\n    }\n}\n\nexport function stringifyErrorMessage(err : mixed) : string {\n\n    let defaultMessage = `<unknown error: ${ Object.prototype.toString.call(err) }>`;\n\n    if (!err) {\n        return defaultMessage;\n    }\n\n    if (err instanceof Error) {\n        return err.message || defaultMessage;\n    }\n\n    if (typeof err.message === 'string') {\n        return err.message || defaultMessage;\n    }\n\n    return defaultMessage;\n}\n\nexport function stringify(item : mixed) : string {\n    if (typeof item === 'string') {\n        return item;\n    }\n\n    if (item && item.toString && typeof item.toString === 'function') {\n        // $FlowFixMe\n        return item.toString();\n    }\n\n    return Object.prototype.toString.call(item);\n}\n\nexport function domainMatches(hostname : string, domain : string) : boolean {\n    hostname = hostname.split('://')[1];\n    let index = hostname.indexOf(domain);\n    return (index !== -1 && hostname.slice(index) === domain);\n}\n\nexport function patchMethod(obj : Object, name : string, handler : Function) {\n    let original = obj[name];\n\n    obj[name] = function patchedMethod() : mixed {\n        return handler({\n            context:      this,\n            args:         Array.prototype.slice.call(arguments),\n            original,\n            callOriginal: () => original.apply(this, arguments)\n        });\n    };\n}\n\nexport function extend<T : Object | Function>(obj : T, source : Object) : T {\n    if (!source) {\n        return obj;\n    }\n\n    if (Object.assign) {\n        return Object.assign(obj, source);\n    }\n\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            obj[key] = source[key];\n        }\n    }\n\n    return obj;\n}\n\nexport function values<T>(obj : { [string] : T }) : Array<T> {\n    let result = [];\n    for (let key in obj) {\n        if (obj.hasOwnProperty(key)) {\n            result.push(obj[key]);\n        }\n    }\n    return result;\n}\n\nexport function perc(pixels : number, percentage : number) : number {\n    return Math.round((pixels * percentage) / 100);\n}\n\nexport function min(...args : Array<number>) : number {\n    return Math.min(...args);\n}\n\nexport function max(...args : Array<number>) : number {\n    return Math.max(...args);\n}\n\nexport function regexMap<T>(str : string, regexp : RegExp, handler : () => T) : Array<T> {\n    let results = [];\n\n    // $FlowFixMe\n    str.replace(regexp, function regexMapMatcher(item) {\n        results.push(handler ? handler.apply(null, arguments) : item);\n    });\n\n    // $FlowFixMe\n    return results;\n}\n\nexport function svgToBase64(svg : string) : string {\n    return `data:image/svg+xml;base64,${ base64encode(svg) }`;\n}\n\nexport function objFilter<T, R>(obj : { [string] : T }, filter? : (T, ?string) => mixed = Boolean) : { [string] : R } {\n    let result = {};\n\n    for (let key in obj) {\n        if (!obj.hasOwnProperty(key) || !filter(obj[key], key)) {\n            continue;\n        }\n\n        result[key] = obj[key];\n    }\n\n    return result;\n}\n\nexport function identity <T>(item : T) : T {\n    return item;\n}\n\nexport function regexTokenize(text : string, regexp : RegExp) : Array<string> {\n    let result = [];\n    text.replace(regexp, token => {\n        result.push(token);\n        return '';\n    });\n    return result;\n}\n\nexport function promiseDebounce<T>(method : () => ZalgoPromise<T> | T, delay : number = 50) : () => ZalgoPromise<T> {\n\n    let promise;\n    let timeout;\n\n    return function promiseDebouncedMethod() : ZalgoPromise<T> {\n        if (timeout) {\n            clearTimeout(timeout);\n        }\n\n        let localPromise = promise = promise || new ZalgoPromise();\n\n        timeout = setTimeout(() => {\n            promise = null;\n            timeout = null;\n\n            ZalgoPromise.try(method).then(\n                result => { localPromise.resolve(result); },\n                err => { localPromise.reject(err); }\n            );\n        }, delay);\n\n        return localPromise;\n    };\n}\n\nexport function safeInterval(method : Function, time : number) : { cancel : () => void } {\n\n    let timeout;\n\n    function loop() {\n        timeout = setTimeout(() => {\n            method();\n            loop();\n        }, time);\n    }\n\n    loop();\n\n    return {\n        cancel() {\n            clearTimeout(timeout);\n        }\n    };\n}\n\nexport function isInteger(str : string) : boolean {\n    return Boolean(str.match(/^[0-9]+$/));\n}\n\nexport function isFloat(str : string) : boolean {\n    return Boolean(str.match(/^[0-9]+\\.[0-9]+$/));\n}\n\nexport function serializePrimitive(value : string | number | boolean) : string {\n    return value.toString();\n}\n\nexport function deserializePrimitive(value : string) : string | number | boolean {\n    if (value === 'true') {\n        return true;\n    } else if (value === 'false') {\n        return false;\n    } else if (isInteger(value)) {\n        return parseInt(value, 10);\n    } else if (isFloat(value)) {\n        return parseFloat(value);\n    } else {\n        return value;\n    }\n}\n\nexport function dotify(obj : Object, prefix : string = '', newobj : Object = {}) : { [string] : string } {\n    prefix = prefix ? `${ prefix }.` : prefix;\n    for (let key in obj) {\n        if (!obj.hasOwnProperty(key) || obj[key] === undefined || obj[key] === null || typeof obj[key] === 'function') {\n            continue;\n        } else if (obj[key] && Array.isArray(obj[key]) && obj[key].length && obj[key].every(val => typeof val !== 'object')) {\n            newobj[`${ prefix }${ key }[]`] = obj[key].join(',');\n        } else if (obj[key] && typeof obj[key] === 'object') {\n            newobj = dotify(obj[key], `${ prefix }${ key }`, newobj);\n        } else {\n            newobj[`${ prefix }${ key }`] = serializePrimitive(obj[key]);\n        }\n    }\n    return newobj;\n}\n\nexport function undotify(obj : { [string] : string }) : Object {\n    \n    let result = {};\n\n    for (let key in obj) {\n        if (!obj.hasOwnProperty(key) || typeof obj[key] !== 'string') {\n            continue;\n        }\n\n        let value = obj[key];\n\n        if (key.match(/^.+\\[\\]$/)) {\n            key = key.slice(0, key.length - 2);\n            value = value.split(',').map(deserializePrimitive);\n        } else {\n            value = deserializePrimitive(value);\n        }\n\n        let keyResult = result;\n        let parts = key.split('.');\n        for (let i = 0; i < parts.length; i++) {\n            let part = parts[i];\n            let isLast = (i + 1 === parts.length);\n            let isIndex = !isLast && isInteger(parts[i + 1]);\n\n            if (isLast) {\n                // $FlowFixMe\n                keyResult[part] = value;\n            } else {\n                // $FlowFixMe\n                keyResult = keyResult[part] = keyResult[part] || (isIndex ? [] : {});\n            }\n        }\n    }\n\n    return result;\n}\n\nexport type EventEmitterType = {\n    on : (eventName : string, handler : Function) => CancelableType,\n    once : (eventName : string, handler : Function) => CancelableType,\n    trigger : (eventName : string, ...args : $ReadOnlyArray<mixed>) => ZalgoPromise<void>,\n    triggerOnce : (eventName : string, ...args : $ReadOnlyArray<mixed>) => ZalgoPromise<void>\n};\n\nexport function eventEmitter() : EventEmitterType {\n    let triggered = {};\n    let handlers = {};\n\n    return {\n\n        on(eventName : string, handler : Function) : CancelableType {\n            let handlerList = handlers[eventName] = handlers[eventName] || [];\n\n            handlerList.push(handler);\n\n            let cancelled = false;\n\n            return {\n                cancel() {\n                    if (!cancelled) {\n                        cancelled = true;\n                        handlerList.splice(handlerList.indexOf(handler), 1);\n                    }\n\n                }\n            };\n        },\n\n        once(eventName : string, handler : Function) : CancelableType {\n\n            let listener = this.on(eventName, () => {\n                listener.cancel();\n                handler();\n            });\n\n            return listener;\n        },\n\n        trigger(eventName : string, ...args : $ReadOnlyArray<mixed>) : ZalgoPromise<void> {\n\n            let handlerList = handlers[eventName];\n            let promises = [];\n\n            if (handlerList) {\n                for (let handler of handlerList) {\n                    promises.push(ZalgoPromise.try(() => handler(...args)));\n                }\n            }\n\n            return ZalgoPromise.all(promises).then(noop);\n        },\n\n        triggerOnce(eventName : string, ...args : $ReadOnlyArray<mixed>) : ZalgoPromise<void> {\n\n            if (triggered[eventName]) {\n                return ZalgoPromise.resolve();\n            }\n\n            triggered[eventName] = true;\n            return this.trigger(eventName, ...args);\n        }\n    };\n}\n\nexport function camelToDasherize(string : string) : string {\n    return string.replace(/([A-Z])/g, (g) => {\n        return `-${ g.toLowerCase() }`;\n    });\n}\n\nexport function dasherizeToCamel(string : string) : string {\n    return string.replace(/-([a-z])/g, (g) => {\n        return g[1].toUpperCase();\n    });\n}\n\nexport function capitalizeFirstLetter(string : string) : string {\n    return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();\n}\n\nexport function get(item : Object, path : string, def : mixed) : mixed {\n\n    if (!path) {\n        return def;\n    }\n\n    let pathParts = path.split('.');\n\n    // Loop through each section of our key path\n\n    for (let i = 0; i < pathParts.length; i++) {\n\n        // If we have an object, we can get the key\n        if (typeof item === 'object' && item !== null) {\n            item = item[pathParts[i]];\n\n        // Otherwise, we should return the default (undefined if not provided)\n        } else {\n            return def;\n        }\n    }\n\n    // If our final result is undefined, we should return the default\n\n    return item === undefined ? def : item;\n}\n\nexport function safeTimeout(method : Function, time : number) {\n\n    let interval = safeInterval(() => {\n        time -= 100;\n        if (time <= 0) {\n            interval.cancel();\n            method();\n        }\n    }, 100);\n}\n\nexport function defineLazyProp<T>(obj : Object | Array<mixed>, key : string | number, getter : () => T) {\n    if (Array.isArray(obj)) {\n        if (typeof key !== 'number') {\n            throw new TypeError(`Array key must be number`);\n        }\n    } else if (typeof obj === 'object' && obj !== null) {\n        if (typeof key !== 'string') {\n            throw new TypeError(`Object key must be string`);\n        }\n    }\n    \n    Object.defineProperty(obj, key, {\n        configurable: true,\n        enumerable:   true,\n        get:          () => {\n            // $FlowFixMe\n            delete obj[key];\n            let value = getter();\n            // $FlowFixMe\n            obj[key] = value;\n            return value;\n        },\n        set: (value : T) => {\n            // $FlowFixMe\n            delete obj[key];\n            // $FlowFixMe\n            obj[key] = value;\n        }\n    });\n}\n\nexport function arrayFrom<T>(item : Iterable<T>) : Array<T> { // eslint-disable-line no-undef\n    return Array.prototype.slice.call(item);\n}\n\nexport function isObject(item : mixed) : boolean {\n    return (typeof item === 'object' && item !== null);\n}\n\nexport function isObjectObject(obj : mixed) : boolean {\n    return isObject(obj) && Object.prototype.toString.call(obj) === '[object Object]';\n}\n\nexport function isPlainObject(obj : mixed) : boolean {\n    if (!isObjectObject(obj)) {\n        return false;\n    }\n\n    // $FlowFixMe\n    let constructor = obj.constructor;\n\n    if (typeof constructor !== 'function') {\n        return false;\n    }\n\n    let prototype = constructor.prototype;\n\n    if (!isObjectObject(prototype)) {\n        return false;\n    }\n\n    if (!prototype.hasOwnProperty('isPrototypeOf')) {\n        return false;\n    }\n\n    return true;\n}\n\nexport function replaceObject<T : Array<mixed> | Object> (item : T, replacer : (mixed, string | number, string) => mixed, fullKey : string = '') : T {\n\n    if (Array.isArray(item)) {\n        let length = item.length;\n        let result : Array<mixed> = [];\n\n        for (let i = 0; i < length; i++) {\n\n            \n            defineLazyProp(result, i, () => {\n                let itemKey = fullKey ? `${ fullKey }.${ i }` : `${ i }`;\n                let el = item[i];\n\n                let child = replacer(el, i, itemKey);\n\n                if (isPlainObject(child) || Array.isArray(child)) {\n                    // $FlowFixMe\n                    child = replaceObject(child, replacer, itemKey);\n                }\n\n                return child;\n            });\n        }\n\n        // $FlowFixMe\n        return result;\n    } else if (isPlainObject(item)) {\n        let result = {};\n\n        for (let key in item) {\n            if (!item.hasOwnProperty(key)) {\n                continue;\n            }\n\n            defineLazyProp(result, key, () => {\n                let itemKey = fullKey ? `${ fullKey }.${ key }` : `${ key }`;\n                // $FlowFixMe\n                let el = item[key];\n\n                let child = replacer(el, key, itemKey);\n\n                if (isPlainObject(child) || Array.isArray(child)) {\n                    // $FlowFixMe\n                    child = replaceObject(child, replacer, itemKey);\n                }\n\n                return child;\n            });\n        }\n\n        // $FlowFixMe\n        return result;\n    } else {\n        throw new Error(`Pass an object or array`);\n    }\n}\n\n\nexport function copyProp(source : Object, target : Object, name : string, def : mixed) {\n    if (source.hasOwnProperty(name)) {\n        let descriptor = Object.getOwnPropertyDescriptor(source, name);\n        // $FlowFixMe\n        Object.defineProperty(target, name, descriptor);\n\n    } else {\n        target[name] = def;\n    }\n}\n\ntype RegexResultType = {\n    text : string,\n    groups : Array<string>,\n    start : number,\n    end : number,\n    length : number,\n    replace : (text : string) => string\n};\n\nexport function regex(pattern : string | RegExp, string : string, start : number = 0) : ?RegexResultType {\n\n    if (typeof pattern === 'string') {\n        // eslint-disable-next-line security/detect-non-literal-regexp\n        pattern = new RegExp(pattern);\n    }\n\n    let result = string.slice(start).match(pattern);\n\n    if (!result) {\n        return;\n    }\n\n    // $FlowFixMe\n    let index : number = result.index;\n    let regmatch = result[0];\n\n    return {\n        text:   regmatch,\n        groups: result.slice(1),\n        start:  start + index,\n        end:    start + index + regmatch.length,\n        length: regmatch.length,\n\n        replace(text : string) : string {\n\n            if (!regmatch) {\n                return '';\n            }\n\n            return `${ regmatch.slice(0, start + index) }${ text }${ regmatch.slice(index + regmatch.length) }`;\n        }\n    };\n}\n\nexport function regexAll(pattern : string | RegExp, string : string) : Array<RegexResultType> {\n\n    let matches = [];\n    let start = 0;\n\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n        let regmatch = regex(pattern, string, start);\n\n        if (!regmatch) {\n            break;\n        }\n\n        matches.push(regmatch);\n        start = match.end;\n    }\n\n    return matches;\n}\n\nexport function isDefined(value : ?mixed) : boolean {\n    return value !== null && value !== undefined;\n}\n\nexport function cycle(method : Function) : ZalgoPromise<void> {\n    return ZalgoPromise.try(method).then(() => cycle(method));\n}\n\nexport function debounce<T>(method : (...args : Array<mixed>) => T, time : number = 100) : (...args : Array<mixed>) => void {\n\n    let timeout;\n\n    return function debounceWrapper() {\n        clearTimeout(timeout);\n\n        timeout = setTimeout(() => {\n            return method.apply(this, arguments);\n        }, time);\n    };\n}\n\nexport function isRegex(item : mixed) : boolean {\n    return Object.prototype.toString.call(item) === '[object RegExp]';\n}\n\ntype FunctionProxy<T : Function> = (method : T) => T;\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport let weakMapMemoize : FunctionProxy<*> = <R : mixed>(method : (arg : any) => R) : ((...args : Array<any>) => R) => {\n\n    let weakmap = new WeakMap();\n\n    // eslint-disable-next-line flowtype/no-weak-types\n    return function weakmapMemoized(arg : any) : R {\n        return weakmap.getOrSet(arg, () => method.call(this, arg));\n    };\n};\n\ntype FunctionPromiseProxy<R : mixed, T : (...args : $ReadOnlyArray<mixed>) => ZalgoPromise<R>> = (T) => T;\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport let weakMapMemoizePromise : FunctionPromiseProxy<*, *> = <R : mixed>(method : (arg : any) => ZalgoPromise<R>) : ((...args : Array<any>) => ZalgoPromise<R>) => {\n\n    let weakmap = new WeakMap();\n\n    // eslint-disable-next-line flowtype/no-weak-types\n    return function weakmapMemoizedPromise(arg : any) : ZalgoPromise<R> {\n        return weakmap.getOrSet(arg, () =>\n            method.call(this, arg).finally(() => {\n                weakmap.delete(arg);\n            })\n        );\n    };\n};\n\nexport function getOrSet<O : Object, T : mixed>(obj : O, key : string, getter : () => T) : T {\n    if (obj.hasOwnProperty(key)) {\n        return obj[key];\n    }\n\n    const val = getter();\n    obj[key] = val;\n    return val;\n}\n\nexport type CleanupType = {|\n    set : <T : mixed>(string, T) => T, // eslint-disable-line no-undef\n    register : (Function) => void,\n    all : () => ZalgoPromise<void>\n|};\n\nexport function cleanup(obj : Object) : CleanupType {\n\n    const tasks = [];\n    let cleaned = false;\n\n    return {\n        set<T : mixed>(name : string, item : T) : T {\n            if (!cleaned) {\n                obj[name] = item;\n                this.register(() => {\n                    delete obj[name];\n                });\n            }\n            return item;\n        },\n\n        register(method : Function) {\n            if (cleaned) {\n                method();\n            } else {\n                tasks.push(once(method));\n            }\n        },\n\n        all() : ZalgoPromise<void> {\n            const results = [];\n            cleaned = true;\n\n            while (tasks.length) {\n                const task = tasks.pop();\n                results.push(task());\n            }\n\n            return ZalgoPromise.all(results).then(noop);\n        }\n    };\n}\n\nexport function tryCatch<T>(fn : () => T) : {| result : T, error : void |} | {| result : void, error : mixed |} {\n    let result;\n    let error;\n\n    try {\n        result = fn();\n    } catch (err) {\n        error = err;\n    }\n    \n    // $FlowFixMe\n    return { result, error };\n}\n\nexport function removeFromArray<X, T : Array<X>>(arr : T, item : X) {\n    const index = arr.indexOf(item);\n    if (index !== -1) {\n        arr.splice(index, 1);\n    }\n}\n\nexport function assertExists<T>(name : string, thing : void | null | T) : T {\n    if (thing === null || typeof thing === 'undefined') {\n        throw new Error(`Expected ${ name } to be present`);\n    }\n\n    return thing;\n}\n","/* @flow */\n\nexport function hasNativeWeakMap() : boolean {\n\n    if (typeof WeakMap === 'undefined') {\n        return false;\n    }\n\n    if (typeof Object.freeze === 'undefined') {\n        return false;\n    }\n\n    try {\n\n        let testWeakMap = new WeakMap();\n        let testKey = {};\n        let testValue = '__testvalue__';\n\n        Object.freeze(testKey);\n\n        testWeakMap.set(testKey, testValue);\n\n        if (testWeakMap.get(testKey) === testValue) {\n            return true;\n        }\n\n        return false;\n\n    } catch (err) {\n\n        return false;\n    }\n}\n","/* @flow */\n/* eslint max-lines: off */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { linkFrameWindow, isWindowClosed,\n    type SameDomainWindowType, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { WeakMap } from 'cross-domain-safe-weakmap/src';\n\nimport { inlineMemoize, noop, stringify, capitalizeFirstLetter,\n    once, extend, safeInterval, uniqueID, arrayFrom } from './util';\nimport { isDevice } from './device';\nimport { KEY_CODES } from './constants';\nimport type { CancelableType } from './types';\n\ntype ElementRefType = string | HTMLElement;\n\nexport function isDocumentReady() : boolean {\n    return Boolean(document.body) && document.readyState === 'complete';\n}\n\nexport function urlEncode(str : string) : string {\n    return str.replace(/\\?/g, '%3F').replace(/&/g, '%26').replace(/#/g, '%23').replace(/\\+/g, '%2B');\n}\n\nexport function waitForWindowReady() : ZalgoPromise<void> {\n    return inlineMemoize(waitForWindowReady, () : ZalgoPromise<void> => {\n        return new ZalgoPromise(resolve => {\n            if (isDocumentReady()) {\n                resolve();\n            }\n\n            window.addEventListener('load', () => resolve());\n        });\n    });\n}\n\nexport function waitForDocumentReady() : ZalgoPromise<void> {\n    return inlineMemoize(waitForDocumentReady, () : ZalgoPromise<void> => {\n        return new ZalgoPromise(resolve => {\n\n            if (isDocumentReady()) {\n                return resolve();\n            }\n\n            let interval = setInterval(() => {\n                if (isDocumentReady()) {\n                    clearInterval(interval);\n                    return resolve();\n                }\n            }, 10);\n        });\n    });\n}\n\nexport function waitForDocumentBody() : ZalgoPromise<HTMLBodyElement> {\n    return waitForDocumentReady().then(() => {\n        if (document.body) {\n            return document.body;\n        }\n\n        throw new Error('Document ready but document.body not present');\n    });\n}\n\nexport function parseQuery(queryString : string) : Object {\n    return inlineMemoize(parseQuery, () : Object => {\n        let params = {};\n\n        if (!queryString) {\n            return params;\n        }\n\n        if (queryString.indexOf('=') === -1) {\n            return params;\n        }\n\n        for (let pair of queryString.split('&')) {\n            pair = pair.split('=');\n\n            if (pair[0] && pair[1]) {\n                params[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);\n            }\n        }\n\n        return params;\n    }, [ queryString ]);\n}\n\n\nexport function getQueryParam(name : string) : string {\n    return parseQuery(window.location.search.slice(1))[name];\n}\n\nexport function urlWillRedirectPage(url : string) : boolean {\n\n    if (url.indexOf('#') === -1) {\n        return true;\n    }\n\n    if (url.indexOf('#') === 0) {\n        return false;\n    }\n\n    if (url.split('#')[0] === window.location.href.split('#')[0]) {\n        return false;\n    }\n\n    return true;\n}\n\nexport function formatQuery(obj : { [ string ] : string } = {}) : string {\n\n    return Object.keys(obj).filter(key => {\n        return typeof obj[key] === 'string';\n    }).map(key => {\n        return `${ urlEncode(key) }=${ urlEncode(obj[key]) }`;\n    }).join('&');\n}\n\nexport function extendQuery(originalQuery : string, props : { [ string ] : string } = {}) : string {\n\n    if (!props || !Object.keys(props).length) {\n        return originalQuery;\n    }\n\n    return formatQuery({\n        ...parseQuery(originalQuery),\n        ...props\n    });\n}\n\nexport function extendUrl(url : string, options : { query? : { [string] : string }, hash? : { [string] : string } } = {}) : string {\n\n    let query = options.query || {};\n    let hash = options.hash || {};\n\n    let originalUrl;\n    let originalQuery;\n    let originalHash;\n\n    [ originalUrl, originalHash ] = url.split('#');\n    [ originalUrl, originalQuery ] = originalUrl.split('?');\n\n    let queryString = extendQuery(originalQuery, query);\n    let hashString = extendQuery(originalHash, hash);\n\n    if (queryString) {\n        originalUrl = `${ originalUrl }?${ queryString }`;\n    }\n\n    if (hashString) {\n        originalUrl = `${ originalUrl }#${ hashString }`;\n    }\n\n    return originalUrl;\n}\n\nexport function redirect(url : string, win : CrossDomainWindowType = window) : ZalgoPromise<void> {\n    return new ZalgoPromise(resolve => {\n        win.location = url;\n        if (!urlWillRedirectPage(url)) {\n            resolve();\n        }\n    });\n}\n\nexport function hasMetaViewPort() : boolean {\n    let meta = document.querySelector('meta[name=viewport]');\n\n    if (isDevice() && window.screen.width < 660 && !meta) {\n        return false;\n    }\n\n    return true;\n}\n\nexport function isElementVisible(el : HTMLElement) : boolean {\n    return Boolean(el.offsetWidth || el.offsetHeight || el.getClientRects().length);\n}\n\nexport function enablePerformance() : boolean {\n    return inlineMemoize(enablePerformance, () : boolean => {\n        /* eslint-disable compat/compat */\n        return Boolean(\n            window.performance &&\n            performance.now &&\n            performance.timing &&\n            performance.timing.connectEnd &&\n            performance.timing.navigationStart &&\n            (Math.abs(performance.now() - Date.now()) > 1000) &&\n            (performance.now() - (performance.timing.connectEnd - performance.timing.navigationStart)) > 0\n        );\n        /* eslint-enable compat/compat */\n    });\n}\n\nexport function getPageRenderTime() : ZalgoPromise<?number> {\n    return waitForDocumentReady().then(() => {\n\n        if (!enablePerformance()) {\n            return;\n        }\n\n        let timing = window.performance.timing;\n\n        if (timing.connectEnd && timing.domInteractive) {\n            return timing.domInteractive - timing.connectEnd;\n        }\n    });\n}\n\nexport function htmlEncode(html : string = '') : string {\n    return html.toString()\n        .replace(/&/g, '&amp;')\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;')\n        .replace(/\"/g, '&quot;')\n        .replace(/'/g, '&#39;')\n        .replace(/\\//g, '&#x2F;');\n}\n\nexport function isBrowser() : boolean {\n    return (typeof window !== 'undefined');\n}\n\nexport function querySelectorAll(selector : string, doc : HTMLElement = window.document) : Array<HTMLElement> {\n    return Array.prototype.slice.call(doc.querySelectorAll(selector));\n}\n\nexport function onClick(element : HTMLElement, handler : (Event) => void) {\n    element.addEventListener('touchstart', noop);\n    element.addEventListener('click', handler);\n    element.addEventListener('keypress', (event : Event) => {\n        // $FlowFixMe\n        if (event.keyCode === KEY_CODES.ENTER) {\n            return handler(event);\n        }\n    });\n}\n\nexport function getScript({ host = window.location.host, path } : { host? : string, path : string }) : ?HTMLScriptElement {\n    return inlineMemoize(getScript, () : ?HTMLScriptElement => {\n\n        let url = `${ host }${ path }`;\n        let scripts = Array.prototype.slice.call(document.getElementsByTagName('script'));\n\n        for (let script of scripts) {\n            if (!script.src) {\n                continue;\n            }\n\n            let src = script.src.replace(/^https?:\\/\\//, '').split('?')[0];\n\n            if (src === url) {\n                return script;\n            }\n        }\n    }, [ path ]);\n}\n\nexport function isLocalStorageEnabled() : boolean {\n    return inlineMemoize(isLocalStorageEnabled, () => {\n        try {\n            if (typeof window === 'undefined') {\n                return false;\n            }\n\n            if (window.localStorage) {\n                let value = Math.random().toString();\n                window.localStorage.setItem('__test__localStorage__', value);\n                let result = window.localStorage.getItem('__test__localStorage__');\n                window.localStorage.removeItem('__test__localStorage__');\n                if (value === result) {\n                    return true;\n                }\n            }\n        } catch (err) {\n            // pass\n        }\n        return false;\n    });\n}\n\nexport function getBrowserLocales() : Array<{ country? : string, lang : string }> {\n    let nav = window.navigator;\n\n    let locales = nav.languages\n        ? Array.prototype.slice.apply(nav.languages)\n        : [];\n\n    if (nav.language) {\n        locales.push(nav.language);\n    }\n\n    if (nav.userLanguage) {\n        locales.push(nav.userLanguage);\n    }\n\n    return locales.map(locale => {\n\n        if (locale && locale.match(/^[a-z]{2}[-_][A-Z]{2}$/)) {\n            let [ lang, country ] = locale.split(/[-_]/);\n            return { country, lang };\n        }\n\n        if (locale && locale.match(/^[a-z]{2}$/)) {\n            return { lang: locale };\n        }\n\n        return null;\n\n    }).filter(Boolean);\n}\n\n\nexport function appendChild(container : HTMLElement, child : HTMLElement | Text) {\n    container.appendChild(child);\n}\n\nexport function isElement(element : mixed) : boolean {\n\n    if (element instanceof window.Element) {\n        return true;\n    }\n\n    if (element !== null && typeof element === 'object' && element.nodeType === 1 && typeof element.style === 'object' && typeof element.ownerDocument === 'object') {\n        return true;\n    }\n\n    return false;\n}\n\nexport function getElementSafe(id : ElementRefType, doc : Document | HTMLElement = document) : ?HTMLElement {\n\n    if (isElement(id)) {\n        // $FlowFixMe\n        return id;\n    }\n\n    if (typeof id === 'string') {\n        return doc.querySelector(id);\n    }\n}\n\nexport function getElement(id : ElementRefType, doc : Document | HTMLElement = document) : HTMLElement {\n\n    let element = getElementSafe(id, doc);\n\n    if (element) {\n        return element;\n    }\n\n    throw new Error(`Can not find element: ${ stringify(id) }`);\n}\n\nexport function elementReady(id : ElementRefType) : ZalgoPromise<window.HTMLElement> {\n    return new ZalgoPromise((resolve, reject) => {\n\n        let name = stringify(id);\n        let el = getElementSafe(id);\n\n        if (el) {\n            return resolve(el);\n        }\n\n        if (isDocumentReady()) {\n            return reject(new Error(`Document is ready and element ${ name } does not exist`));\n        }\n\n        let interval = setInterval(() => {\n\n            el = getElementSafe(id);\n\n            if (el) {\n                clearInterval(interval);\n                return resolve(el);\n            }\n\n            if (isDocumentReady()) {\n                clearInterval(interval);\n                return reject(new Error(`Document is ready and element ${ name } does not exist`));\n            }\n        }, 10);\n    });\n}\n\nexport function PopupOpenError(message : string) {\n    this.message = message;\n}\n\nPopupOpenError.prototype = Object.create(Error.prototype);\n\ntype PopupOptions = {|\n    name? : string,\n    width? : number,\n    height? : number,\n    top? : number,\n    left? : number,\n    status? : 0 | 1,\n    resizable? : 0 | 1,\n    toolbar? : 0 | 1,\n    menubar? : 0 | 1,\n    scrollbars? : 0 | 1\n|};\n\nexport function popup(url : string, options? : PopupOptions) : CrossDomainWindowType {\n\n    // $FlowFixMe\n    options = options || {};\n\n    let { width, height } = options;\n\n    let top = 0;\n    let left = 0;\n\n    if (width) {\n        if (window.outerWidth) {\n            left = Math.round((window.outerWidth - width) / 2) + window.screenX;\n        } else if (window.screen.width) {\n            left = Math.round((window.screen.width - width) / 2);\n        }\n    }\n\n    if (height) {\n        if (window.outerHeight) {\n            top = Math.round((window.outerHeight - height) / 2) + window.screenY;\n        } else if (window.screen.height) {\n            top = Math.round((window.screen.height - height) / 2);\n        }\n    }\n\n    options = {\n        top,\n        left,\n        width,\n        height,\n        status:     1,\n        toolbar:    0,\n        menubar:    0,\n        resizable:  1,\n        scrollbars: 1,\n        ...options\n    };\n\n    let name = options.name || '';\n    delete options.name;\n\n    // eslint-disable-next-line array-callback-return\n    let params = Object.keys(options).map(key => {\n        // $FlowFixMe\n        if (options[key]) {\n            return `${ key }=${ stringify(options[key]) }`;\n        }\n    }).filter(Boolean).join(',');\n\n    let win;\n\n    try {\n        win = window.open(url, name, params, true);\n    } catch (err) {\n        throw new PopupOpenError(`Can not open popup window - ${ err.stack || err.message }`);\n    }\n\n    if (isWindowClosed(win)) {\n        let err = new PopupOpenError(`Can not open popup window - blocked`);\n        throw err;\n    }\n\n    window.addEventListener('unload', () => win.close());\n\n    return win;\n}\n\n\nexport function writeToWindow(win : SameDomainWindowType, html : string) {\n    try {\n        win.document.open();\n        win.document.write(html);\n        win.document.close();\n    } catch (err) {\n        try {\n            win.location = `javascript: document.open(); document.write(${ JSON.stringify(html) }); document.close();`;\n        } catch (err2) {\n            // pass\n        }\n    }\n}\n\nexport function writeElementToWindow(win : SameDomainWindowType, el : HTMLElement) {\n\n    let tag = el.tagName.toLowerCase();\n\n    if (tag !== 'html') {\n        throw new Error(`Expected element to be html, got ${ tag }`);\n    }\n\n    let documentElement = win.document.documentElement;\n\n    for (const child of arrayFrom(documentElement.children)) {\n        documentElement.removeChild(child);\n    }\n\n    for (const child of arrayFrom(el.children)) {\n        documentElement.appendChild(child);\n    }\n}\n\nexport function setStyle(el : HTMLElement, styleText : string, doc : Document = window.document) {\n    // $FlowFixMe\n    if (el.styleSheet) {\n        // $FlowFixMe\n        el.styleSheet.cssText = styleText;\n    } else {\n        el.appendChild(doc.createTextNode(styleText));\n    }\n}\n\nexport type ElementOptionsType = {\n    style? : { [ string ] : string },\n    id? : string,\n    class? : ?Array<string>,\n    attributes? : { [ string ] : string },\n    styleSheet? : ?string,\n    html? : ?string\n};\n\nlet awaitFrameLoadPromises : WeakMap<HTMLIFrameElement, ZalgoPromise<HTMLIFrameElement>>;\n\nexport function awaitFrameLoad(frame : HTMLIFrameElement) : ZalgoPromise<HTMLIFrameElement> {\n    awaitFrameLoadPromises = awaitFrameLoadPromises || new WeakMap();\n\n    if (awaitFrameLoadPromises.has(frame)) {\n        let promise = awaitFrameLoadPromises.get(frame);\n        if (promise) {\n            return promise;\n        }\n    }\n\n    let promise = new ZalgoPromise((resolve, reject) => {\n        frame.addEventListener('load', () => {\n            linkFrameWindow(frame);\n            resolve(frame);\n        });\n\n        frame.addEventListener('error', (err : Event) => {\n            if (frame.contentWindow) {\n                resolve(frame);\n            } else {\n                reject(err);\n            }\n        });\n    });\n\n    awaitFrameLoadPromises.set(frame, promise);\n\n    return promise;\n}\n\nexport function awaitFrameWindow(frame : HTMLIFrameElement) : ZalgoPromise<CrossDomainWindowType> {\n    return awaitFrameLoad(frame).then(loadedFrame => {\n\n        if (!loadedFrame.contentWindow) {\n            throw new Error(`Could not find window in iframe`);\n        }\n\n        return loadedFrame.contentWindow;\n    });\n}\n\nexport function createElement(tag : string = 'div', options : ElementOptionsType = {}, container : ?HTMLElement) : HTMLElement {\n\n    tag = tag.toLowerCase();\n    let element = document.createElement(tag);\n\n    if (options.style) {\n        extend(element.style, options.style);\n    }\n\n    if (options.class) {\n        element.className = options.class.join(' ');\n    }\n\n    if (options.id) {\n        element.setAttribute('id', options.id);\n    }\n\n    if (options.attributes) {\n        for (let key of Object.keys(options.attributes)) {\n            element.setAttribute(key, options.attributes[key]);\n        }\n    }\n\n    if (options.styleSheet) {\n        setStyle(element, options.styleSheet);\n    }\n\n    if (container) {\n        appendChild(container, element);\n    }\n\n    if (options.html) {\n        if (tag === 'iframe') {\n            // $FlowFixMe\n            if (!container || !element.contentWindow) {\n                throw new Error(`Iframe html can not be written unless container provided and iframe in DOM`);\n            }\n\n            // $FlowFixMe\n            writeToWindow(element.contentWindow, options.html);\n\n        } else {\n            element.innerHTML = options.html;\n        }\n    }\n\n    return element;\n}\n\n\nexport type IframeElementOptionsType = {\n    style? : { [ string ] : string },\n    class? : ?Array<string>,\n    attributes? : { [ string ] : string },\n    styleSheet? : ?string,\n    html? : ?string,\n    url? : ?string\n};\n\nexport function iframe(options : IframeElementOptionsType = {}, container : ?HTMLElement) : HTMLIFrameElement {\n\n    let attributes = options.attributes || {};\n    let style = options.style || {};\n\n    let frame = createElement('iframe', {\n        attributes: {\n            allowTransparency: 'true',\n            ...attributes\n        },\n        style: {\n            backgroundColor: 'transparent',\n            border:          'none',\n            ...style\n        },\n        html:  options.html,\n        class: options.class\n    });\n\n    const isIE = window.navigator.userAgent.match(/MSIE|Edge/i);\n    \n    if (!frame.hasAttribute('id')) {\n        frame.setAttribute('id', uniqueID());\n    }\n\n    // $FlowFixMe\n    awaitFrameLoad(frame);\n\n    if (container) {\n        let el = getElement(container);\n        el.appendChild(frame);\n    }\n\n    if (options.url || isIE) {\n        frame.setAttribute('src', options.url || 'about:blank');\n    }\n\n    // $FlowFixMe\n    return frame;\n}\n\nexport function addEventListener(obj : HTMLElement, event : string, handler : (event : Event) => void) : CancelableType {\n    obj.addEventListener(event, handler);\n    return {\n        cancel() {\n            obj.removeEventListener(event, handler);\n        }\n    };\n}\n\nexport function bindEvents(element : HTMLElement, eventNames : Array<string>, handler : (event : Event) => void) : CancelableType {\n\n    handler = once(handler);\n\n    for (let eventName of eventNames) {\n        element.addEventListener(eventName, handler);\n    }\n\n    return {\n        cancel: once(() => {\n            for (let eventName of eventNames) {\n                element.removeEventListener(eventName, handler);\n            }\n        })\n    };\n}\n\nconst VENDOR_PREFIXES = [ 'webkit', 'moz', 'ms', 'o' ];\n\nexport function setVendorCSS(element : HTMLElement, name : string, value : string) {\n\n    // $FlowFixMe\n    element.style[name] = value;\n\n    let capitalizedName = capitalizeFirstLetter(name);\n\n    for (let prefix of VENDOR_PREFIXES) {\n        // $FlowFixMe\n        element.style[`${ prefix }${ capitalizedName }`] = value;\n    }\n}\n\nconst ANIMATION_START_EVENTS = [ 'animationstart', 'webkitAnimationStart', 'oAnimationStart', 'MSAnimationStart' ];\nconst ANIMATION_END_EVENTS   = [ 'animationend', 'webkitAnimationEnd', 'oAnimationEnd', 'MSAnimationEnd' ];\n\nexport function animate(element : ElementRefType, name : string, clean : (Function) => void, timeout : number = 1000) : ZalgoPromise<void> {\n    return new ZalgoPromise((resolve, reject) => {\n\n        let el = getElement(element);\n\n        if (!el) {\n            return resolve();\n        }\n\n        let hasStarted = false;\n\n        let startTimeout;\n        let endTimeout;\n        let startEvent;\n        let endEvent;\n\n        function cleanUp() {\n            clearTimeout(startTimeout);\n            clearTimeout(endTimeout);\n            startEvent.cancel();\n            endEvent.cancel();\n        }\n\n        startEvent = bindEvents(el, ANIMATION_START_EVENTS, event => {\n\n            // $FlowFixMe\n            if (event.target !== el || event.animationName !== name) {\n                return;\n            }\n\n            clearTimeout(startTimeout);\n\n            event.stopPropagation();\n\n            startEvent.cancel();\n            hasStarted = true;\n\n            endTimeout = setTimeout(() => {\n                cleanUp();\n                resolve();\n            }, timeout);\n        });\n\n        endEvent = bindEvents(el, ANIMATION_END_EVENTS, event => {\n\n            // $FlowFixMe\n            if (event.target !== el || event.animationName !== name) {\n                return;\n            }\n\n            cleanUp();\n\n            // $FlowFixMe\n            if (typeof event.animationName === 'string' && event.animationName !== name) {\n                return reject(`Expected animation name to be ${ name }, found ${ event.animationName }`);\n            }\n\n            return resolve();\n        });\n\n        setVendorCSS(el, 'animationName', name);\n\n        startTimeout = setTimeout(() => {\n            if (!hasStarted) {\n                cleanUp();\n                return resolve();\n            }\n        }, 200);\n\n        if (clean) {\n            clean(cleanUp);\n        }\n    });\n}\n\nconst STYLE = {\n\n    DISPLAY: {\n        NONE:  'none',\n        BLOCK: 'block'\n    },\n\n    VISIBILITY: {\n        VISIBLE: 'visible',\n        HIDDEN:  'hidden'\n    },\n\n    IMPORTANT: 'important'\n};\n\nexport function makeElementVisible(element : HTMLElement) {\n    element.style.setProperty('visibility', '');\n}\n\nexport function makeElementInvisible(element : HTMLElement) {\n    element.style.setProperty('visibility', STYLE.VISIBILITY.HIDDEN, STYLE.IMPORTANT);\n}\n\n\nexport function showElement(element : HTMLElement) {\n    element.style.setProperty('display', '');\n}\n\nexport function hideElement(element : HTMLElement) {\n    element.style.setProperty('display', STYLE.DISPLAY.NONE, STYLE.IMPORTANT);\n}\n\nexport function destroyElement(element : HTMLElement) {\n    if (element && element.parentNode) {\n        element.parentNode.removeChild(element);\n    }\n}\n\nexport function showAndAnimate(element : HTMLElement, name : string, clean : (Function) => void) : ZalgoPromise<void> {\n    let animation = animate(element, name, clean);\n    showElement(element);\n    return animation;\n}\n\nexport function animateAndHide(element : HTMLElement, name : string, clean : (Function) => void) : ZalgoPromise<void> {\n    return animate(element, name, clean).then(() => {\n        hideElement(element);\n    });\n}\n\nexport function addClass(element : HTMLElement, name : string) {\n    element.classList.add(name);\n}\n\nexport function removeClass(element : HTMLElement, name : string) {\n    element.classList.remove(name);\n}\n\nexport function isElementClosed(el : HTMLElement) : boolean {\n    if (!el || !el.parentNode) {\n        return true;\n    }\n    return false;\n}\n\nexport function watchElementForClose(element : HTMLElement, handler : () => mixed) : CancelableType {\n    handler = once(handler);\n\n    let interval;\n\n    if (isElementClosed(element)) {\n        handler();\n    } else {\n        interval = safeInterval(() => {\n            if (isElementClosed(element)) {\n                interval.cancel();\n                handler();\n            }\n        }, 50);\n    }\n\n    return {\n        cancel() {\n            if (interval) {\n                interval.cancel();\n            }\n        }\n    };\n}\n\nexport function fixScripts(el : HTMLElement, doc : Document = window.document) {\n    for (let script of querySelectorAll('script', el)) {\n        let parentNode = script.parentNode;\n\n        if (!parentNode) {\n            continue;\n        }\n\n        let newScript = doc.createElement('script');\n        newScript.text = script.textContent;\n        parentNode.replaceChild(newScript, script);\n    }\n}\n\ntype OnResizeOptions = {|\n    width? : boolean,\n    height? : boolean,\n    interval? : number,\n    win? : SameDomainWindowType\n|};\n\nexport function onResize(el : HTMLElement, handler : ({ width : number, height : number }) => void, { width = true, height = true, interval = 100, win = window } : OnResizeOptions = {}) : {} {\n    let currentWidth = el.offsetWidth;\n    let currentHeight = el.offsetHeight;\n\n    handler({ width: currentWidth, height: currentHeight });\n\n    let check = () => {\n        let newWidth = el.offsetWidth;\n        let newHeight = el.offsetHeight;\n\n        if ((width && newWidth !== currentWidth) || (height && newHeight !== currentHeight)) {\n            handler({ width: newWidth, height: newHeight });\n        }\n\n        currentWidth = newWidth;\n        currentHeight = newHeight;\n    };\n\n    let observer;\n    let timeout;\n\n    if (typeof win.ResizeObserver !== 'undefined') {\n        observer = new win.ResizeObserver(check);\n        observer.observe(el);\n\n    } else if (typeof win.MutationObserver !== 'undefined') {\n        observer = new win.MutationObserver(check);\n        observer.observe(el, {\n            attributes:    true,\n            childList:     true,\n            subtree:       true,\n            characterData: false\n        });\n        win.addEventListener('resize', check);\n    } else {\n        let loop = () => {\n            check();\n            timeout = setTimeout(loop, interval);\n        };\n        loop();\n    }\n\n    return {\n        cancel: () => {\n            observer.disconnect();\n            window.removeEventListener('resize', check);\n            clearTimeout(timeout);\n        }\n    };\n}\n","/* @flow */\n\nexport const BRIDGE_TIMEOUT = 5000;\nexport const CHILD_WINDOW_TIMEOUT = 5000;\n\nexport const ACK_TIMEOUT = 2000;\nexport const ACK_TIMEOUT_KNOWN = 10000;\nexport const RES_TIMEOUT = __TEST__ ? 2000 : -1;\nexport const RESPONSE_CYCLE_TIME = 500;\n","/* @flow */\n\nexport const MESSAGE_TYPE = {\n    REQUEST:  ('postrobot_message_request' : 'postrobot_message_request'),\n    RESPONSE: ('postrobot_message_response' : 'postrobot_message_response'),\n    ACK:      ('postrobot_message_ack' : 'postrobot_message_ack')\n};\n\nexport const MESSAGE_ACK = {\n    SUCCESS: ('success' : 'success'),\n    ERROR:   ('error' : 'error')\n};\n\nexport const MESSAGE_NAME = {\n    METHOD:      ('postrobot_method' : 'postrobot_method'),\n    HELLO:       ('postrobot_hello' : 'postrobot_hello'),\n    OPEN_TUNNEL: ('postrobot_open_tunnel' : 'postrobot_open_tunnel')\n};\n\nexport const SEND_STRATEGY = {\n    POST_MESSAGE: ('postrobot_post_message' : 'postrobot_post_message'),\n    BRIDGE:       ('postrobot_bridge' : 'postrobot_bridge'),\n    GLOBAL:       ('postrobot_global' : 'postrobot_global')\n};\n\nexport const BRIDGE_NAME_PREFIX = '__postrobot_bridge__';\nexport const POSTROBOT_PROXY =    '__postrobot_proxy__';\n\nexport const WILDCARD = '*';\n\nexport const SERIALIZATION_TYPE = {\n    CROSS_DOMAIN_ZALGO_PROMISE: ('cross_domain_zalgo_promise' : 'cross_domain_zalgo_promise'),\n    CROSS_DOMAIN_FUNCTION:      ('cross_domain_function' : 'cross_domain_function'),\n    CROSS_DOMAIN_WINDOW:        ('cross_domain_window' : 'cross_domain_window')\n};\n","/* @flow */\n\nimport { type CrossDomainWindowType, type SameDomainWindowType } from 'cross-domain-utils/src';\nimport { WeakMap } from 'cross-domain-safe-weakmap/src';\nimport { getOrSet } from 'belter/src';\n\nexport function getGlobal(win : SameDomainWindowType = window) : Object {\n    if (win !== window) {\n        return win[__POST_ROBOT__.__GLOBAL_KEY__];\n    }\n    const global : Object = win[__POST_ROBOT__.__GLOBAL_KEY__] = win[__POST_ROBOT__.__GLOBAL_KEY__] || {};\n    return global;\n}\n\nexport function deleteGlobal() {\n    delete window[__POST_ROBOT__.__GLOBAL_KEY__];\n}\n\ntype ObjectGetter = () => Object;\nconst getObj : ObjectGetter = () => ({});\n\ntype GetOrSet<T> = ((string, () => T) => T) & ((string, () => void) => void);\n\ntype GlobalStore<T> = {|\n    get : ((string, T) => T) & ((string, void) => T | void),\n    set : (string, T) => T,\n    has : (string) => boolean,\n    del : (string) => void,\n    getOrSet : GetOrSet<T>,\n    reset : () => void,\n    keys : () => $ReadOnlyArray<string>\n|};\n\n// $FlowFixMe\nexport function globalStore<T : mixed>(key? : string = 'store', defStore? : ObjectGetter = getObj) : GlobalStore<T> {\n    return getOrSet(getGlobal(), key, () => {\n        let store = defStore();\n\n        return {\n            has: (storeKey) => {\n                return store.hasOwnProperty(storeKey);\n            },\n            get: (storeKey, defVal) => {\n                // $FlowFixMe\n                return store.hasOwnProperty(storeKey) ? store[storeKey] : defVal;\n            },\n            set: (storeKey, val) => {\n                store[storeKey] = val;\n                return val;\n            },\n            del: (storeKey) => {\n                delete store[storeKey];\n            },\n            getOrSet: (storeKey, getter) => {\n                // $FlowFixMe\n                return getOrSet(store, storeKey, getter);\n            },\n            reset: () => {\n                store = defStore();\n            },\n            keys: () => {\n                return Object.keys(store);\n            }\n        };\n    });\n}\n\nexport class WildCard {}\n\nexport function getWildcard() : WildCard {\n    const global = getGlobal();\n    global.WINDOW_WILDCARD = global.WINDOW_WILDCARD || new WildCard();\n    return global.WINDOW_WILDCARD;\n}\n\ntype WindowStore<T> = {|\n    get : ((CrossDomainWindowType | WildCard, T) => T) & ((CrossDomainWindowType | WildCard, void) => T | void),\n    set : (CrossDomainWindowType | WildCard, T) => T,\n    has : (CrossDomainWindowType | WildCard) => boolean,\n    del : (CrossDomainWindowType | WildCard) => void,\n    getOrSet : (CrossDomainWindowType | WildCard, () => T) => T\n|};\n\n// $FlowFixMe\nexport function windowStore<T>(key? : string = 'store', defStore? : ObjectGetter = getObj) : WindowStore<T> {\n    return globalStore('windowStore').getOrSet(key, () => {\n        const winStore = new WeakMap();\n\n        const getStore = (win : CrossDomainWindowType | WildCard) : ObjectGetter => {\n            return winStore.getOrSet(win, defStore);\n        };\n    \n        return {\n            has: (win) => {\n                const store = getStore(win);\n                return store.hasOwnProperty(key);\n            },\n            get: (win, defVal) => {\n                const store = getStore(win);\n                // $FlowFixMe\n                return store.hasOwnProperty(key) ? store[key] : defVal;\n            },\n            set: (win, val) => {\n                const store = getStore(win);\n                store[key] = val;\n                return val;\n            },\n            del: (win) => {\n                const store = getStore(win);\n                delete store[key];\n            },\n            getOrSet: (win, getter) => {\n                const store = getStore(win);\n                return getOrSet(store, key, getter);\n            }\n        };\n    });\n}\n","/* @flow */\n\nimport { getAncestor, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { noop, uniqueID } from 'belter/src';\n\nimport { MESSAGE_NAME, WILDCARD } from '../conf';\nimport { windowStore, globalStore } from '../global';\nimport type { OnType, SendType, CancelableType } from '../types';\n\nfunction getInstanceID() : string {\n    return globalStore('instance').getOrSet('instanceID', uniqueID);\n}\n\nfunction getHelloPromise(win : CrossDomainWindowType) : ZalgoPromise<{ win : CrossDomainWindowType, domain : string }> {\n    const helloPromises = windowStore('helloPromises');\n    return helloPromises.getOrSet(win, () => new ZalgoPromise());\n}\n\nfunction listenForHello({ on } : { on : OnType }) : CancelableType {\n    return on(MESSAGE_NAME.HELLO, { domain: WILDCARD }, ({ source, origin }) => {\n        getHelloPromise(source).resolve({ win: source, domain: origin });\n        return { instanceID: getInstanceID() };\n    });\n}\n\nexport function sayHello(win : CrossDomainWindowType, { send } : { send : SendType }) : ZalgoPromise<{ win : CrossDomainWindowType, domain : string, instanceID : string }> {\n    return send(win, MESSAGE_NAME.HELLO, { instanceID: getInstanceID() }, { domain: WILDCARD, timeout: -1 })\n        .then(({ origin, data: { instanceID } }) => {\n            getHelloPromise(win).resolve({ win, domain: origin });\n            return { win, domain: origin, instanceID };\n        });\n}\n\nexport function getWindowInstanceID(win : CrossDomainWindowType, { send } : { send : SendType }) : ZalgoPromise<string> {\n    return windowStore('windowInstanceIDPromises').getOrSet(win, () => {\n        return sayHello(win, { send }).then(({ instanceID }) => instanceID);\n    });\n}\n\nexport function initHello({ on, send } : { on : OnType, send : SendType }) : CancelableType {\n    return globalStore('builtinListeners').getOrSet('helloListener', () => {\n        const listener = listenForHello({ on });\n\n        const parent = getAncestor();\n        if (parent) {\n            sayHello(parent, { send }).catch(noop);\n        }\n\n        return listener;\n    });\n}\n\nexport function awaitWindowHello(win : CrossDomainWindowType, timeout : number = 5000, name : string = 'Window') : ZalgoPromise<{ win : CrossDomainWindowType, domain : string }> {\n    let promise = getHelloPromise(win);\n\n    if (timeout !== -1) {\n        promise = promise.timeout(timeout, new Error(`${ name } did not load after ${ timeout }ms`));\n    }\n\n    return promise;\n}\n","/* @flow */\n\nimport { type CrossDomainWindowType } from 'cross-domain-utils/src';\n\nimport { windowStore } from '../global';\n\nexport function markWindowKnown(win : CrossDomainWindowType) {\n    const knownWindows = windowStore('knownWindows');\n    knownWindows.set(win, true);\n}\n\nexport function isWindowKnown(win : CrossDomainWindowType) : boolean {\n    const knownWindows = windowStore('knownWindows');\n    return knownWindows.get(win, false);\n}\n","/* @flow */\n\nexport const TYPE = {\n    FUNCTION:  ('function' : 'function'),\n    ERROR:     ('error' : 'error'),\n    PROMISE:   ('promise' : 'promise'),\n    REGEX:     ('regex' : 'regex'),\n    DATE:      ('date' : 'date'),\n    ARRAY:     ('array' : 'array'),\n    OBJECT:    ('object' : 'object'),\n    STRING:    ('string' : 'string'),\n    NUMBER:    ('number' : 'number'),\n    BOOLEAN:   ('boolean' : 'boolean'),\n    NULL:      ('null' : 'null'),\n    UNDEFINED: ('undefined' : 'undefined')\n};\n","/* @flow */\n\nimport { TYPE } from './constants';\nimport type { CustomSerializedType } from './types';\n\nexport function isSerializedType(item : mixed) : boolean {\n    return (typeof item === 'object' && item !== null && typeof item.__type__ === 'string');\n}\n\nexport function determineType(val : mixed) : $Values<typeof TYPE> | void {\n    if (typeof val === 'undefined') {\n        return TYPE.UNDEFINED;\n    }\n\n    if (val === null) {\n        return TYPE.NULL;\n    }\n\n    if (Array.isArray(val)) {\n        return TYPE.ARRAY;\n    }\n\n    if (typeof val === 'function') {\n        return TYPE.FUNCTION;\n    }\n\n    if (typeof val === 'object') {\n\n        if (val instanceof Error) {\n            return TYPE.ERROR;\n        }\n\n        if (typeof val.then === 'function') {\n            return TYPE.PROMISE;\n        }\n\n        if (Object.prototype.toString.call(val) === '[object RegExp]') {\n            return TYPE.REGEX;\n        }\n\n        if (Object.prototype.toString.call(val) === '[object Date]') {\n            return TYPE.DATE;\n        }\n\n        return TYPE.OBJECT;\n    }\n\n    if (typeof val === 'string') {\n        return TYPE.STRING;\n    }\n\n    if (typeof val === 'number') {\n        return TYPE.NUMBER;\n    }\n\n    if (typeof val === 'boolean') {\n        return TYPE.BOOLEAN;\n    }\n}\n\nexport function serializeType<T : string, V : mixed>(type : T, val : V) : CustomSerializedType<T, V> {\n    return {\n        __type__: type,\n        __val__:  val\n    };\n}\n","/* @flow */\n\nimport { TYPE } from './constants';\nimport type { Thenable, CustomSerializedType, NativeSerializedType } from './types';\nimport { determineType, isSerializedType } from './common';\nimport {\n    serializeFunction,\n    serializeError, type SerializedError,\n    serializePromise,\n    serializeRegex, type SerializedRegex,\n    serializeDate, type SerializedDate,\n    serializeArray,\n    serializeObject,\n    serializeString,\n    serializeNumber,\n    serializeBoolean,\n    serializeNull\n} from './serializers';\n\ntype NativeSerializer<V : mixed, S : mixed, T : $Values<typeof TYPE>> = (value : V, key : string) => NativeSerializedType<T, S>;\ntype CustomSerializer<V : mixed, S : mixed, T : string> = (value : V, key : string) => CustomSerializedType<T, S>;\ntype PrimitiveSerializer<V : mixed, S : mixed> = (value : V, key : string) => S;\ntype CustomOrPrimitiveSerializer<V : mixed, T : string> = CustomSerializer<V, *, T> | PrimitiveSerializer<V, *>;\ntype NativeOrCustomOrPrimitiveSerializer<V : mixed, S : mixed, T : string> = NativeSerializer<V, S, T> | CustomOrPrimitiveSerializer<V, T>;\n\ntype Serializers = {|\n    function? : CustomOrPrimitiveSerializer<Function, typeof TYPE.FUNCTION>,\n    error? : NativeOrCustomOrPrimitiveSerializer<Error, SerializedError, typeof TYPE.ERROR>,\n    promise? : CustomOrPrimitiveSerializer<Thenable, typeof TYPE.PROMISE>,\n    regex? : NativeOrCustomOrPrimitiveSerializer<RegExp, SerializedRegex, typeof TYPE.REGEX>,\n    date? : NativeOrCustomOrPrimitiveSerializer<Date, SerializedDate, typeof TYPE.DATE>,\n    array? : CustomOrPrimitiveSerializer<$ReadOnlyArray<mixed>, typeof TYPE.ARRAY>,\n    object? : CustomOrPrimitiveSerializer<Object, typeof TYPE.OBJECT>,\n    string? : CustomOrPrimitiveSerializer<string, typeof TYPE.STRING>,\n    number? : CustomOrPrimitiveSerializer<number, typeof TYPE.NUMBER>,\n    boolean? : CustomOrPrimitiveSerializer<boolean, typeof TYPE.BOOLEAN>,\n    null? : CustomOrPrimitiveSerializer<null, typeof TYPE.NULL>\n|};\n\nconst SERIALIZER : Serializers = {\n    [ TYPE.FUNCTION ]:  serializeFunction,\n    [ TYPE.ERROR ]:     serializeError,\n    [ TYPE.PROMISE ]:   serializePromise,\n    [ TYPE.REGEX ]:     serializeRegex,\n    [ TYPE.DATE ]:      serializeDate,\n    [ TYPE.ARRAY ]:     serializeArray,\n    [ TYPE.OBJECT ]:    serializeObject,\n    [ TYPE.STRING ]:    serializeString,\n    [ TYPE.NUMBER ]:    serializeNumber,\n    [ TYPE.BOOLEAN ]:   serializeBoolean,\n    [ TYPE.NULL ]:      serializeNull\n};\n\n// $FlowFixMe\nconst defaultSerializers : Serializers = {};\n\nexport function serialize<T : mixed>(obj : T, serializers : Serializers = defaultSerializers) : string {\n\n    function replacer(key) : ?mixed {\n        const val = this[key];\n\n        if (isSerializedType(this)) {\n            return val;\n        }\n        \n        const type = determineType(val);\n\n        if (!type) {\n            return val;\n        }\n\n        // $FlowFixMe\n        const serializer = serializers[type] || SERIALIZER[type];\n\n        if (!serializer) {\n            return val;\n        }\n\n        return serializer(val, key);\n    }\n\n    const result = JSON.stringify(obj, replacer);\n\n    if (typeof result === 'undefined') {\n        return TYPE.UNDEFINED;\n    }\n\n    return result;\n}\n","/* @flow */\n\nexport type SerializedFunction = void;\n\nexport function serializeFunction() : SerializedFunction {\n    // pass\n}\n\nexport function deserializeFunction() {\n    throw new Error(`Function serialization is not implemented; nothing to deserialize`);\n}\n","/* @flow */\n\nimport { serializeType } from '../common';\nimport { TYPE } from '../constants';\nimport type { NativeSerializedType } from '../types';\n\nexport type SerializedError = {|\n    message : string,\n    stack : string,\n    code : string | number | void\n|};\n\n// $FlowFixMe\nexport function serializeError({ message, stack, code } : Error) : NativeSerializedType<typeof TYPE.ERROR, SerializedError> {\n    return serializeType(TYPE.ERROR, { message, stack, code });\n}\n\nexport function deserializeError({ message, stack, code } : SerializedError) : Error {\n    const error = new Error(message);\n    // $FlowFixMe\n    error.code = code;\n    error.stack = `${ stack }\\n\\n${ error.stack }`;\n    return error;\n}\n","/* @flow */\n\nexport type SerializedPromise = void;\n\nexport function serializePromise() : SerializedPromise {\n    // pass\n}\n\nexport function deserializePromise() {\n    throw new Error(`Promise serialization is not implemented; nothing to deserialize`);\n}\n","/* @flow */\n\nimport { serializeType } from '../common';\nimport { TYPE } from '../constants';\nimport type { NativeSerializedType } from '../types';\n\nexport type SerializedRegex = string;\n\nexport function serializeRegex(val : RegExp) : NativeSerializedType<typeof TYPE.REGEX, SerializedRegex> {\n    return serializeType(TYPE.REGEX, val.source);\n}\n\nexport function deserializeRegex(val : string) : RegExp {\n    // eslint-disable-next-line security/detect-non-literal-regexp\n    return new RegExp(val);\n}\n","/* @flow */\n\nimport { serializeType } from '../common';\nimport { TYPE } from '../constants';\nimport type { NativeSerializedType } from '../types';\n\nexport type SerializedDate = string;\n\nexport function serializeDate(val : Date) : NativeSerializedType<typeof TYPE.DATE, SerializedDate> {\n    return serializeType(TYPE.DATE, val.toJSON());\n}\n\nexport function deserializeDate(val : string) : Date {\n    return new Date(val);\n}\n","/* @flow */\n\nexport type SerializedArray<T : mixed = mixed> = $ReadOnlyArray<T>;\n\nexport function serializeArray<T : mixed>(val : $ReadOnlyArray<T>) : SerializedArray<T> {\n    return val;\n}\n\nexport function deserializeArray<T : mixed>(val : SerializedArray<T>) : $ReadOnlyArray<T> {\n    return val;\n}\n","/* @flow */\n\nexport type SerializedObject = Object;\n\nexport function serializeObject(val : Object) : SerializedObject {\n    return val;\n}\n\nexport function deserializeObject(val : SerializedObject) : Object {\n    return val;\n}\n","/* @flow */\n\nexport type SerializedString = string;\n\nexport function serializeString(val : string) : SerializedString {\n    return val;\n}\n\nexport function deserializeString(val : SerializedString) : string {\n    return val;\n}\n","/* @flow */\n\nexport type SerializedNumber = number;\n\nexport function serializeNumber(val : number) : SerializedNumber {\n    return val;\n}\n\nexport function deserializeNumber(val : SerializedNumber) : number {\n    return val;\n}\n","/* @flow */\n\nexport type SerializedBoolean = boolean;\n\nexport function serializeBoolean(val : boolean) : SerializedBoolean {\n    return val;\n}\n\nexport function deserializeBoolean(val : SerializedBoolean) : boolean {\n    return val;\n}\n","/* @flow */\n\nexport type SerializedNull = null;\n\nexport function serializeNull(val : null) : SerializedNull {\n    return val;\n}\n\nexport function deserializeNull(val : SerializedNull) : null {\n    return val;\n}\n","/* @flow */\n\nimport type { Thenable } from './types';\nimport { TYPE } from './constants';\nimport { determineType, isSerializedType } from './common';\nimport {\n    deserializeFunction,\n    deserializeError, type SerializedError,\n    deserializePromise,\n    deserializeRegex, type SerializedRegex,\n    deserializeDate, type SerializedDate,\n    deserializeArray,\n    deserializeObject,\n    deserializeString,\n    deserializeNumber,\n    deserializeBoolean,\n    deserializeNull\n} from './serializers';\n\ntype Deserializer<V : mixed, S : mixed> = (serializedValue : S, key : string) => V;\ntype PrimitiveDeserializer<V, S = V> = (serializedValue : S, key : string) => V;\n\ntype Deserializers = {\n    function? : Deserializer<Function, *>,\n    error? : Deserializer<Error, SerializedError>,\n    promise? : Deserializer<Thenable, *>,\n    regex? : Deserializer<RegExp, SerializedRegex>,\n    date? : Deserializer<Date, SerializedDate>,\n    array? : PrimitiveDeserializer<$ReadOnlyArray<mixed>>,\n    object? : PrimitiveDeserializer<Object>,\n    string? : PrimitiveDeserializer<string>,\n    number? : PrimitiveDeserializer<number>,\n    boolean? : PrimitiveDeserializer<boolean>,\n    null? : PrimitiveDeserializer<null>,\n    [string] : Deserializer<mixed, *>\n};\n\n// $FlowFixMe\nconst DESERIALIZER : Deserializers = {\n    [ TYPE.FUNCTION ]:  deserializeFunction,\n    [ TYPE.ERROR ]:     deserializeError,\n    [ TYPE.PROMISE ]:   deserializePromise,\n    [ TYPE.REGEX ]:     deserializeRegex,\n    [ TYPE.DATE ]:      deserializeDate,\n    [ TYPE.ARRAY ]:     deserializeArray,\n    [ TYPE.OBJECT ]:    deserializeObject,\n    [ TYPE.STRING ]:    deserializeString,\n    [ TYPE.NUMBER ]:    deserializeNumber,\n    [ TYPE.BOOLEAN ]:   deserializeBoolean,\n    [ TYPE.NULL ]:      deserializeNull\n};\n\n// $FlowFixMe\nconst defaultDeserializers : Deserializers = {};\n\nexport function deserialize<T : mixed | null | void>(str : string, deserializers : Deserializers = defaultDeserializers) : T {\n    if (str === TYPE.UNDEFINED) {\n        // $FlowFixMe\n        return;\n    }\n\n    function replacer(key, val) : ?mixed {\n        if (isSerializedType(this)) {\n            return val;\n        }\n\n        let type;\n        let value;\n\n        if (isSerializedType(val)) {\n            type = val.__type__;\n            value = val.__val__;\n        } else {\n            type = determineType(val);\n            value = val;\n        }\n\n        if (!type) {\n            return value;\n        }\n\n        // $FlowFixMe\n        const deserializer = deserializers[type] || DESERIALIZER[type];\n\n        if (!deserializer) {\n            return value;\n        }\n\n        return deserializer(value, key);\n    }\n\n    return JSON.parse(str, replacer);\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { getDomain, isSameDomain, isOpener, isSameTopWindow, matchDomain, getUserAgent, getDomainFromUrl, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { noop } from 'belter/src';\n\nimport { BRIDGE_NAME_PREFIX } from '../conf';\nimport { windowStore } from '../global';\n\nexport function needsBridgeForBrowser() : boolean {\n\n    if (getUserAgent(window).match(/MSIE|trident|edge\\/12|edge\\/13/i)) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function needsBridgeForWin(win : CrossDomainWindowType) : boolean {\n\n    if (!isSameTopWindow(window, win)) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function needsBridgeForDomain(domain : ?string, win : ?CrossDomainWindowType) : boolean {\n\n    if (domain) {\n        if (getDomain() !== getDomainFromUrl(domain)) {\n            return true;\n        }\n    } else if (win) {\n        if (!isSameDomain(win))  {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nexport function needsBridge({ win, domain } : { win? : CrossDomainWindowType, domain? : string }) : boolean {\n\n    if (!needsBridgeForBrowser()) {\n        return false;\n    }\n\n    if (domain && !needsBridgeForDomain(domain, win)) {\n        return false;\n    }\n\n    if (win && !needsBridgeForWin(win)) {\n        return false;\n    }\n\n    return true;\n}\n\nexport function getBridgeName(domain : string) : string {\n\n    domain = domain || getDomainFromUrl(domain);\n\n    const sanitizedDomain = domain.replace(/[^a-zA-Z0-9]+/g, '_');\n\n    const id = `${ BRIDGE_NAME_PREFIX }_${ sanitizedDomain }`;\n\n    return id;\n}\n\nexport function isBridge() : boolean {\n    return Boolean(window.name && window.name === getBridgeName(getDomain()));\n}\n\nexport const documentBodyReady = new ZalgoPromise(resolve => {\n\n    if (window.document && window.document.body) {\n        return resolve(window.document.body);\n    }\n\n    const interval = setInterval(() => {\n        if (window.document && window.document.body) {\n            clearInterval(interval);\n            return resolve(window.document.body);\n        }\n    }, 10);\n});\n\nexport function registerRemoteWindow(win : CrossDomainWindowType) {\n    const remoteWindowPromises = windowStore('remoteWindowPromises');\n    remoteWindowPromises.getOrSet(win, () => new ZalgoPromise());\n}\n\nexport function findRemoteWindow(win : CrossDomainWindowType) : ZalgoPromise<(remoteWin : CrossDomainWindowType, message : string, remoteDomain : string) => void> {\n    const remoteWindowPromises = windowStore('remoteWindowPromises');\n    const remoteWinPromise = remoteWindowPromises.get(win);\n\n    if (!remoteWinPromise) {\n        throw new Error(`Remote window promise not found`);\n    }\n\n    return remoteWinPromise;\n}\n\ntype SendMessageType = {|\n    (string) : void,\n    fireAndForget : (string) => void\n|};\n\nexport function registerRemoteSendMessage(win : CrossDomainWindowType, domain : string, sendMessage : SendMessageType) {\n    const sendMessageWrapper = (remoteWin : CrossDomainWindowType, remoteDomain : string, message : string) => {\n        if (remoteWin !== win) {\n            throw new Error(`Remote window does not match window`);\n        }\n\n        if (!matchDomain(remoteDomain, domain)) {\n            throw new Error(`Remote domain ${ remoteDomain } does not match domain ${ domain }`);\n        }\n\n        sendMessage.fireAndForget(message);\n    };\n\n    findRemoteWindow(win).resolve(sendMessageWrapper);\n}\n\nexport function rejectRemoteSendMessage(win : CrossDomainWindowType, err : Error) {\n    findRemoteWindow(win).reject(err).catch(noop);\n}\n\nexport function sendBridgeMessage(win : CrossDomainWindowType, domain : string, message : string) : ZalgoPromise<void> {\n\n    const messagingChild  = isOpener(window, win);\n    const messagingParent = isOpener(win, window);\n\n    if (!messagingChild && !messagingParent) {\n        throw new Error(`Can only send messages to and from parent and popup windows`);\n    }\n\n    return findRemoteWindow(win).then(sendMessage => {\n        return sendMessage(win, domain, message);\n    });\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { getDomain, getFrameByName, isWindowClosed, getDomainFromUrl, normalizeMockUrl, type CrossDomainWindowType } from 'cross-domain-utils/src';\n\nimport { BRIDGE_TIMEOUT, MESSAGE_NAME } from '../conf';\nimport { awaitWindowHello } from '../lib';\nimport { windowStore, globalStore } from '../global';\nimport type { OnType, SendType, ReceiveMessageType } from '../types';\n\nimport { getBridgeName, documentBodyReady, registerRemoteSendMessage, registerRemoteWindow } from './common';\n\nexport function listenForOpenTunnel({ on, send, receiveMessage } : { on : OnType, send : SendType, receiveMessage : ReceiveMessageType }) {\n    const popupWindowsByName = globalStore('popupWindowsByName');\n\n    on(MESSAGE_NAME.OPEN_TUNNEL, ({ source, origin, data }) => {\n        const bridgePromise = globalStore('bridges').get(origin);\n\n        if (!bridgePromise) {\n            throw new Error(`Can not find bridge promise for domain ${ origin }`);\n        }\n\n        return bridgePromise.then(bridge => {\n\n            // $FlowFixMe\n            if (source !== bridge) {\n                // $FlowFixMe\n                throw new Error(`Message source does not matched registered bridge for domain ${ origin }`);\n            }\n\n            if (!data.name) {\n                throw new Error(`Register window expected to be passed window name`);\n            }\n\n            if (!data.sendMessage) {\n                throw new Error(`Register window expected to be passed sendMessage method`);\n            }\n\n            if (!popupWindowsByName.has(data.name)) {\n                throw new Error(`Window with name ${ data.name } does not exist, or was not opened by this window`);\n            }\n\n            // $FlowFixMe\n            if (!popupWindowsByName.get(data.name).domain) {\n                throw new Error(`We do not have a registered domain for window ${ data.name }`);\n            }\n\n            // $FlowFixMe\n            if (popupWindowsByName.get(data.name).domain !== origin) {\n                // $FlowFixMe\n                throw new Error(`Message origin ${ origin } does not matched registered window origin ${ popupWindowsByName.get(data.name).domain }`);\n            }\n\n            // $FlowFixMe\n            registerRemoteSendMessage(popupWindowsByName.get(data.name).win, origin, data.sendMessage);\n\n            return {\n                sendMessage(message) {\n\n                    if (!window || window.closed) {\n                        return;\n                    }\n\n                    const winDetails = popupWindowsByName.get(data.name);\n\n                    if (!winDetails) {\n                        return;\n                    }\n\n                    try {\n                        receiveMessage({\n                            data:   message,\n                            origin: winDetails.domain,\n                            source: winDetails.win\n                        }, { on, send });\n                    } catch (err) {\n                        ZalgoPromise.reject(err);\n                    }\n                }\n            };\n        });\n    });\n}\n\nfunction openBridgeFrame(name : string, url : string) : HTMLIFrameElement {\n\n    const iframe = document.createElement(`iframe`);\n\n    iframe.setAttribute(`name`, name);\n    iframe.setAttribute(`id`,   name);\n\n    iframe.setAttribute(`style`, `display: none; margin: 0; padding: 0; border: 0px none; overflow: hidden;`);\n    iframe.setAttribute(`frameborder`, `0`);\n    iframe.setAttribute(`border`, `0`);\n    iframe.setAttribute(`scrolling`, `no`);\n    iframe.setAttribute(`allowTransparency`, `true`);\n\n    iframe.setAttribute(`tabindex`, `-1`);\n    iframe.setAttribute(`hidden`, `true`);\n    iframe.setAttribute(`title`, ``);\n    iframe.setAttribute(`role`, `presentation`);\n\n    iframe.src = url;\n\n    return iframe;\n}\n\nexport function hasBridge(url : string, domain : string) : boolean {\n    const bridges = globalStore('bridges');\n    return bridges.has(domain || getDomainFromUrl(url));\n}\n\nexport function openBridge(url : string, domain : string) : ZalgoPromise<CrossDomainWindowType> {\n    const bridges = globalStore('bridges');\n    const bridgeFrames = globalStore('bridgeFrames');\n    \n    domain = domain || getDomainFromUrl(url);\n    \n    return bridges.getOrSet(domain, () => ZalgoPromise.try(() => {\n\n        if (getDomain() === domain) {\n            throw new Error(`Can not open bridge on the same domain as current domain: ${ domain }`);\n        }\n\n        const name  = getBridgeName(domain);\n        const frame = getFrameByName(window, name);\n\n        if (frame) {\n            throw new Error(`Frame with name ${ name } already exists on page`);\n        }\n\n        const iframe = openBridgeFrame(name, url);\n        bridgeFrames.set(domain, iframe);\n\n        return documentBodyReady.then(body => {\n\n            body.appendChild(iframe);\n            const bridge = iframe.contentWindow;\n\n            return new ZalgoPromise((resolve, reject) => {\n\n                iframe.addEventListener('load', resolve);\n                iframe.addEventListener('error', reject);\n\n            }).then(() => {\n\n                return awaitWindowHello(bridge, BRIDGE_TIMEOUT, `Bridge ${ url }`);\n\n            }).then(() => {\n\n                return bridge;\n            });\n        });\n    }));\n}\n\ntype WinDetails = {|\n    win : CrossDomainWindowType,\n    domain? : ?string,\n    name? : ?string\n|};\n\nexport function linkWindow({ win, name, domain } : WinDetails) : WinDetails {\n    const popupWindowsByName = globalStore('popupWindowsByName');\n    const popupWindowsByWin = windowStore('popupWindowsByWin');\n\n    for (const winName of popupWindowsByName.keys()) {\n        // $FlowFixMe\n        if (isWindowClosed(popupWindowsByName.get(winName).win)) {\n            popupWindowsByName.del(winName);\n        }\n    }\n\n    const details : WinDetails = popupWindowsByWin.getOrSet(win, () => {\n        if (!name) {\n            return { win };\n        }\n        \n        return popupWindowsByName.getOrSet(name, () => {\n            return { win, name };\n        });\n    });\n\n    if (details.win && details.win !== win) {\n        throw new Error(`Different window already linked for window: ${ name || 'undefined' }`);\n    }\n\n    if (name) {\n        if (details.name && details.name !== name) {\n            throw new Error(`Different window already linked for name ${ name }: ${ details.name }`);\n        }\n\n        details.name = name;\n        popupWindowsByName.set(name, details);\n    }\n\n    if (domain) {\n        details.domain = domain;\n        registerRemoteWindow(win);\n    }\n\n    popupWindowsByWin.set(win, details);\n    \n    return details;\n}\n\nexport function linkUrl(win : CrossDomainWindowType, url : string) {\n    linkWindow({ win, domain: getDomainFromUrl(url) });\n}\n\nexport function listenForWindowOpen() {\n    const windowOpen = window.open;\n\n    window.open = function windowOpenWrapper(url : string, name : string, options : string, last : mixed) : mixed {\n        const win = windowOpen.call(this, normalizeMockUrl(url), name, options, last);\n    \n        if (!win) {\n            return win;\n        }\n    \n        linkWindow({ win, name, domain: url ? getDomainFromUrl(url) : null });\n    \n        return win;\n    };\n}\n\nexport function destroyBridges() {\n    const bridges = globalStore('bridges');\n    const bridgeFrames = globalStore('bridgeFrames');\n\n    for (const domain of bridgeFrames.keys()) {\n        const frame = bridgeFrames.get(domain);\n        if (frame && frame.parentNode) {\n            frame.parentNode.removeChild(frame);\n        }\n    }\n    bridgeFrames.reset();\n    bridges.reset();\n}\n","/* @flow */\n\nimport type { OnType, SendType, ReceiveMessageType } from '../types';\n\nimport { listenForWindowOpen, listenForOpenTunnel } from './parent';\nimport { setupOpenTunnelToParent } from './bridge';\nimport { openTunnelToOpener } from './child';\n\nexport function setupBridge({ on, send, receiveMessage } : { on : OnType, send : SendType, receiveMessage : ReceiveMessageType }) {\n    listenForWindowOpen();\n    listenForOpenTunnel({ on, send, receiveMessage });\n    setupOpenTunnelToParent({ on, send });\n    openTunnelToOpener({ on, send, receiveMessage });\n}\n","/* @flow */\n\nimport { type ZalgoPromise } from 'zalgo-promise/src';\nimport { getParent, isWindowClosed, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { noop, uniqueID } from 'belter/src';\n\nimport { MESSAGE_NAME, WILDCARD } from '../conf';\nimport { getGlobal, globalStore } from '../global';\nimport type { SendType, ResponseMessageEvent } from '../types';\n\nfunction cleanTunnelWindows() {\n    const tunnelWindows = globalStore('tunnelWindows');\n\n    for (const key of tunnelWindows.keys()) {\n        const tunnelWindow = tunnelWindows[key];\n\n        try {\n            noop(tunnelWindow.source);\n        } catch (err) {\n            tunnelWindows.del(key);\n            continue;\n        }\n\n        if (isWindowClosed(tunnelWindow.source)) {\n            tunnelWindows.del(key);\n        }\n    }\n}\n\ntype TunnelWindowDataType = {|\n    name : string,\n    source : CrossDomainWindowType,\n    canary : () => void,\n    sendMessage : (message : string) => void\n|};\n\nfunction addTunnelWindow({ name, source, canary, sendMessage } : TunnelWindowDataType) : string {\n    cleanTunnelWindows();\n    const id = uniqueID();\n    const tunnelWindows = globalStore('tunnelWindows');\n    tunnelWindows.set(id, { name, source, canary, sendMessage });\n    return id;\n}\n\nexport function setupOpenTunnelToParent({ send } : { send : SendType }) {\n    getGlobal(window).openTunnelToParent = function openTunnelToParent({ name, source, canary, sendMessage } : TunnelWindowDataType) : ZalgoPromise<ResponseMessageEvent> {\n\n        const tunnelWindows = globalStore('tunnelWindows');\n        const parentWindow = getParent(window);\n    \n        if (!parentWindow) {\n            throw new Error(`No parent window found to open tunnel to`);\n        }\n    \n        const id = addTunnelWindow({ name, source, canary, sendMessage });\n    \n        return send(parentWindow, MESSAGE_NAME.OPEN_TUNNEL, {\n    \n            name,\n    \n            sendMessage() {\n    \n                const tunnelWindow = tunnelWindows.get(id);\n    \n                try {\n                    // IE gets antsy if you try to even reference a closed window\n                    noop(tunnelWindow && tunnelWindow.source);\n                } catch (err) {\n                    tunnelWindows.del(id);\n                    return;\n                }\n    \n                if (!tunnelWindow || !tunnelWindow.source || isWindowClosed(tunnelWindow.source)) {\n                    return;\n                }\n    \n                try {\n                    tunnelWindow.canary();\n                } catch (err) {\n                    return;\n                }\n    \n                tunnelWindow.sendMessage.apply(this, arguments);\n            }\n    \n        }, { domain: WILDCARD });\n    };\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { isSameDomain, getOpener, getDomain, getFrameByName, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { noop } from 'belter/src';\n\nimport { getGlobal, windowStore } from '../global';\nimport type { OnType, SendType, ReceiveMessageType } from '../types';\n\nimport { needsBridge, registerRemoteWindow, rejectRemoteSendMessage, registerRemoteSendMessage, getBridgeName } from './common';\n\nfunction awaitRemoteBridgeForWindow (win : CrossDomainWindowType) : ZalgoPromise<?CrossDomainWindowType> {\n    return windowStore('remoteBridgeAwaiters').getOrSet(win, () => {\n        return ZalgoPromise.try(() => {\n            const frame = getFrameByName(win, getBridgeName(getDomain()));\n\n            if (!frame) {\n                return;\n            }\n\n            // $FlowFixMe\n            if (isSameDomain(frame) && isSameDomain(frame) && getGlobal(frame)) {\n                return frame;\n            }\n\n            return new ZalgoPromise(resolve => {\n\n                let interval;\n                let timeout; // eslint-disable-line prefer-const\n\n                interval = setInterval(() => { // eslint-disable-line prefer-const\n                    // $FlowFixMe\n                    if (frame && isSameDomain(frame) && getGlobal(frame)) {\n                        clearInterval(interval);\n                        clearTimeout(timeout);\n                        return resolve(frame);\n                    }\n                }, 100);\n\n                timeout = setTimeout(() => {\n                    clearInterval(interval);\n                    return resolve();\n                }, 2000);\n            });\n        });\n    });\n}\n\nexport function openTunnelToOpener({ on, send, receiveMessage } : { on : OnType, send : SendType, receiveMessage : ReceiveMessageType }) : ZalgoPromise<void> {\n    return ZalgoPromise.try(() => {\n        const opener = getOpener(window);\n        \n        if (!opener || !needsBridge({ win: opener })) {\n            return;\n        }\n\n        registerRemoteWindow(opener);\n\n        return awaitRemoteBridgeForWindow(opener).then(bridge => {\n\n            if (!bridge) {\n                return rejectRemoteSendMessage(opener, new Error(`Can not register with opener: no bridge found in opener`));\n            }\n\n            if (!window.name) {\n                return rejectRemoteSendMessage(opener, new Error(`Can not register with opener: window does not have a name`));\n            }\n\n            // $FlowFixMe\n            return getGlobal(bridge).openTunnelToParent({\n\n                name: window.name,\n\n                source: window,\n\n                canary() {\n                    // pass\n                },\n\n                sendMessage(message) {\n\n                    try {\n                        noop(window);\n                    } catch (err) {\n                        return;\n                    }\n\n                    if (!window || window.closed) {\n                        return;\n                    }\n\n                    try {\n                        receiveMessage({\n                            data:   message,\n                            origin: this.origin,\n                            source: this.source\n                        }, { on, send });\n                    } catch (err) {\n                        ZalgoPromise.reject(err);\n                    }\n                }\n\n            }).then(({ source, origin, data }) => {\n\n                if (source !== opener) {\n                    throw new Error(`Source does not match opener`);\n                }\n\n                registerRemoteSendMessage(source, origin, data.sendMessage);\n\n            }).catch(err => {\n\n                rejectRemoteSendMessage(opener, err);\n                throw err;\n            });\n        });\n    });\n}\n","/* @flow */\n\nimport { isSameDomain, isWindowClosed, type CrossDomainWindowType, closeWindow,\n    type DomainMatcher, getOpener, WINDOW_TYPE, isWindow, assertSameDomain } from 'cross-domain-utils/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { uniqueID, memoizePromise } from 'belter/src';\nimport { serializeType, type CustomSerializedType } from 'universal-serialize/src';\n\nimport { SERIALIZATION_TYPE } from '../conf';\nimport { windowStore, globalStore } from '../global';\nimport { getWindowInstanceID } from '../lib';\nimport { linkWindow } from '../bridge';\nimport type { OnType, SendType } from '../types';\n\nfunction cleanupProxyWindows() {\n    const idToProxyWindow = globalStore('idToProxyWindow');\n    for (const id of idToProxyWindow.keys()) {\n        // $FlowFixMe\n        if (idToProxyWindow.get(id).shouldClean()) {\n            idToProxyWindow.del(id);\n        }\n    }\n}\n\ntype SerializedProxyWindow = {|\n    id : string,\n    type : $Values<typeof WINDOW_TYPE>,\n    close : () => ZalgoPromise<void>,\n    focus : () => ZalgoPromise<void>,\n    isClosed : () => ZalgoPromise<boolean>,\n    setLocation : (string) => ZalgoPromise<void>,\n    getName : () => ZalgoPromise<?string>,\n    setName : (string) => ZalgoPromise<void>,\n    getInstanceID : () => ZalgoPromise<string>\n|};\n\nfunction getSerializedWindow(id : string, win : CrossDomainWindowType, { send } : { send : SendType }) : SerializedProxyWindow {\n    let windowName;\n    \n    return {\n        id,\n        type:          getOpener(win) ? WINDOW_TYPE.POPUP : WINDOW_TYPE.IFRAME,\n        getInstanceID: memoizePromise(() => getWindowInstanceID(win, { send })),\n        close:         () => ZalgoPromise.try(() => {\n            closeWindow(win);\n        }),\n        getName: () => ZalgoPromise.try(() => {\n            if (isWindowClosed(win)) {\n                return;\n            }\n\n            return windowName;\n        }),\n        focus:   () => ZalgoPromise.try(() => {\n            win.focus();\n        }),\n        isClosed: () => ZalgoPromise.try(() => {\n            return isWindowClosed(win);\n        }),\n        setLocation: (href) => ZalgoPromise.try(() => {\n            if (isSameDomain(win)) {\n                try {\n                    if (win.location && typeof win.location.replace === 'function') {\n                        // $FlowFixMe\n                        win.location.replace(href);\n                        return;\n                    }\n                } catch (err) {\n                    // pass\n                }\n            }\n\n            win.location = href;\n        }),\n        setName: (name) => ZalgoPromise.try(() => {\n            if (__POST_ROBOT__.__IE_POPUP_SUPPORT__) {\n                linkWindow({ win, name });\n            }\n\n            win = assertSameDomain(win);\n\n            win.name = name;\n\n            if (win.frameElement) {\n                win.frameElement.setAttribute('name', name);\n            }\n\n            windowName = name;\n        })\n    };\n}\n\nexport class ProxyWindow {\n\n    isProxyWindow : true = true\n    serializedWindow : SerializedProxyWindow\n    actualWindow : CrossDomainWindowType\n    actualWindowPromise : ZalgoPromise<CrossDomainWindowType>\n    send : SendType\n    name : string\n\n    constructor(serializedWindow : SerializedProxyWindow, actualWindow? : ?CrossDomainWindowType, { send } : { send : SendType }) {\n        this.serializedWindow = serializedWindow;\n        this.actualWindowPromise = new ZalgoPromise();\n        this.send = send;\n        if (actualWindow) {\n            this.setWindow(actualWindow);\n        }\n    }\n\n    getType() : $Values<typeof WINDOW_TYPE> {\n        return this.serializedWindow.type;\n    }\n\n    isPopup() : boolean {\n        return this.getType() === WINDOW_TYPE.POPUP;\n    }\n\n    isIframe() : boolean {\n        return this.getType() === WINDOW_TYPE.IFRAME;\n    }\n\n    setLocation(href : string) : ZalgoPromise<ProxyWindow> {\n        return this.serializedWindow.setLocation(href).then(() => this);\n    }\n\n    setName(name : string) : ZalgoPromise<ProxyWindow> {\n        return this.serializedWindow.setName(name).then(() => this);\n    }\n\n    close() : ZalgoPromise<ProxyWindow> {\n        return this.serializedWindow.close().then(() => this);\n    }\n\n    focus() : ZalgoPromise<ProxyWindow> {\n        return ZalgoPromise.try(() => {\n            return ZalgoPromise.all([\n                this.isPopup() && this.serializedWindow.getName().then(name => {\n                    if (name) {\n                        window.open('', name);\n                    }\n                }),\n                this.serializedWindow.focus()\n            ]);\n        }).then(() => this);\n    }\n\n    isClosed() : ZalgoPromise<boolean> {\n        return this.serializedWindow.isClosed();\n    }\n\n    getWindow() : ?CrossDomainWindowType {\n        return this.actualWindow;\n    }\n\n    setWindow(win : CrossDomainWindowType) {\n        this.actualWindow = win;\n        this.serializedWindow = getSerializedWindow(this.serializedWindow.id, win, { send: this.send });\n        this.actualWindowPromise.resolve(win);\n    }\n\n    awaitWindow() : ZalgoPromise<CrossDomainWindowType> {\n        return this.actualWindowPromise;\n    }\n\n    matchWindow(win : CrossDomainWindowType) : ZalgoPromise<boolean> {\n        return ZalgoPromise.try(() => {\n            if (this.actualWindow) {\n                return win === this.actualWindow;\n            }\n            \n            return ZalgoPromise.hash({\n                proxyInstanceID:       this.getInstanceID(),\n                knownWindowInstanceID: getWindowInstanceID(win, { send: this.send })\n            }).then(({ proxyInstanceID, knownWindowInstanceID }) => {\n                const match = proxyInstanceID === knownWindowInstanceID;\n\n                if (match) {\n                    this.setWindow(win);\n                }\n\n                return match;\n            });\n        });\n    }\n\n    unwrap() : CrossDomainWindowType | ProxyWindow {\n        return this.actualWindow || this;\n    }\n\n    getInstanceID() : ZalgoPromise<string> {\n        return this.serializedWindow.getInstanceID();\n    }\n\n    serialize() : SerializedProxyWindow {\n        return this.serializedWindow;\n    }\n\n    shouldClean() : boolean {\n        return this.actualWindow && isWindowClosed(this.actualWindow);\n    }\n\n    static unwrap(win : CrossDomainWindowType | ProxyWindow) : CrossDomainWindowType | ProxyWindow {\n        return ProxyWindow.isProxyWindow(win)\n            // $FlowFixMe\n            ? win.unwrap()\n            : win;\n    }\n\n    static serialize(win : CrossDomainWindowType | ProxyWindow, { send } : { send : SendType }) : SerializedProxyWindow {\n        cleanupProxyWindows();\n\n        return ProxyWindow.toProxyWindow(win, { send }).serialize();\n    }\n\n    static deserialize(serializedWindow : SerializedProxyWindow, { on, send } : { on : OnType, send : SendType }) : ProxyWindow {\n        cleanupProxyWindows();\n        \n        return globalStore('idToProxyWindow').getOrSet(serializedWindow.id, () => {\n            return new ProxyWindow(serializedWindow, null, { on, send });\n        });\n    }\n\n    static isProxyWindow(obj : CrossDomainWindowType | ProxyWindow) : boolean {\n        // $FlowFixMe\n        return Boolean(obj && !isWindow(obj) && obj.isProxyWindow);\n    }\n\n    static toProxyWindow(win : CrossDomainWindowType | ProxyWindow, { send } : { send : SendType }) : ProxyWindow {\n        cleanupProxyWindows();\n\n        if (ProxyWindow.isProxyWindow(win)) {\n            // $FlowFixMe\n            return win;\n        }\n\n        // $FlowFixMe\n        const realWin : CrossDomainWindowType = win;\n\n        // $FlowFixMe\n        return windowStore('winToProxyWindow').getOrSet(win, () => {\n            const id = uniqueID();\n            const serializedWindow = getSerializedWindow(id, realWin, { send });\n            const proxyWindow = new ProxyWindow(serializedWindow, realWin, { send });\n\n            return globalStore('idToProxyWindow').set(id, proxyWindow);\n        });\n    }\n}\n\nexport type SerializedWindow = CustomSerializedType<typeof SERIALIZATION_TYPE.CROSS_DOMAIN_WINDOW, SerializedProxyWindow>;\n\nexport function serializeWindow(destination : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher, win : CrossDomainWindowType, { send } : { send : SendType }) : SerializedWindow {\n    return serializeType(SERIALIZATION_TYPE.CROSS_DOMAIN_WINDOW, ProxyWindow.serialize(win, { send }));\n}\n\nexport function deserializeWindow(source : CrossDomainWindowType | ProxyWindow, origin : string, win : SerializedProxyWindow, { on, send } : { on : OnType, send : SendType }) : ProxyWindow {\n    return ProxyWindow.deserialize(win, { on, send });\n}\n","/* @flow */\n\nimport { matchDomain, getDomain, type CrossDomainWindowType, type DomainMatcher } from 'cross-domain-utils/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { uniqueID, isRegex } from 'belter/src';\nimport { serializeType, type CustomSerializedType } from 'universal-serialize/src';\n\nimport { MESSAGE_NAME, WILDCARD, SERIALIZATION_TYPE } from '../conf';\nimport { windowStore, globalStore } from '../global';\nimport type { OnType, SendType, CancelableType } from '../types';\n\nimport { ProxyWindow } from './window';\n\ntype StoredMethod = {|\n    name : string,\n    domain : DomainMatcher,\n    val : Function,\n    source : CrossDomainWindowType | ProxyWindow\n|};\n\nfunction addMethod(id : string, val : Function, name : string, source : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher) {\n    const methodStore = windowStore('methodStore');\n    const proxyWindowMethods = globalStore('proxyWindowMethods');\n    \n    if (ProxyWindow.isProxyWindow(source)) {\n        proxyWindowMethods.set(id, { val, name, domain, source });\n    } else {\n        proxyWindowMethods.del(id);\n        // $FlowFixMe\n        const methods = methodStore.getOrSet(source, () => ({}));\n        methods[id] = { domain, name, val, source };\n    }\n}\n\nfunction lookupMethod(source : CrossDomainWindowType, id : string) : ?StoredMethod {\n    const methodStore = windowStore('methodStore');\n    const proxyWindowMethods = globalStore('proxyWindowMethods');\n    const methods = methodStore.getOrSet(source, () => ({}));\n    return methods[id] || proxyWindowMethods.get(id);\n}\n\nfunction listenForFunctionCalls({ on } : { on : OnType }) : CancelableType {\n    return globalStore('builtinListeners').getOrSet('functionCalls', () => {\n        return on(MESSAGE_NAME.METHOD, { domain: WILDCARD }, ({ source, origin, data } : { source : CrossDomainWindowType, origin : string, data : Object }) => {\n            const { id, name } = data;\n\n            const meth = lookupMethod(source, id);\n    \n            if (!meth) {\n                throw new Error(`Could not find method '${ data.name }' with id: ${ data.id } in ${ getDomain(window) }`);\n            }\n\n            const { source: methodSource, domain, val } = meth;\n            \n            return ZalgoPromise.try(() => {\n                if (!matchDomain(domain, origin)) {\n                    // $FlowFixMe\n                    throw new Error(`Method '${ data.name }' domain ${ JSON.stringify(isRegex(meth.domain) ? meth.domain.source : meth.domain) } does not match origin ${ origin } in ${ getDomain(window) }`);\n                }\n                \n                if (ProxyWindow.isProxyWindow(methodSource)) {\n                    // $FlowFixMe\n                    return methodSource.matchWindow(source).then(match => {\n                        if (!match) {\n                            throw new Error(`Method call '${ data.name }' failed - proxy window does not match source in ${ getDomain(window) }`);\n                        }\n                    });\n                }\n            }).then(() => {\n                return val.apply({ source, origin }, data.args);\n            }, err => {\n                return ZalgoPromise.try(() => {\n                    if (val.onError) {\n                        return val.onError(err);\n                    }\n                }).then(() => {\n                    // $FlowFixMe\n                    if (err.stack) {\n                        // $FlowFixMe\n                        err.stack = `Remote call to ${ name }()\\n\\n${ err.stack }`;\n                    }\n\n                    throw err;\n                });\n            }).then(result => {\n                return { result, id, name };\n            });\n        });\n    });\n}\n\nexport type SerializedFunction = CustomSerializedType<typeof SERIALIZATION_TYPE.CROSS_DOMAIN_FUNCTION, {\n    id : string,\n    name : string\n}>;\n\n// eslint-disable-next-line flowtype/require-exact-type\ntype SerializableFunction<T> = {\n    () : ZalgoPromise<T> | T,\n    __id__? : string,\n    __name__? : string\n};\n\nexport function serializeFunction<T>(destination : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher, val : SerializableFunction<T>, key : string, { on } : { on : OnType }) : SerializedFunction {\n    listenForFunctionCalls({ on });\n    \n    const id = val.__id__ || uniqueID();\n    destination = ProxyWindow.unwrap(destination);\n    const name = val.__name__ || val.name || key;\n\n    if (ProxyWindow.isProxyWindow(destination)) {\n        addMethod(id, val, name, destination, domain);\n\n        // $FlowFixMe\n        destination.awaitWindow().then(win => {\n            addMethod(id, val, name, win, domain);\n        });\n    } else {\n        addMethod(id, val, name, destination, domain);\n    }\n\n    return serializeType(SERIALIZATION_TYPE.CROSS_DOMAIN_FUNCTION, { id, name });\n}\n\nexport function deserializeFunction<T>(source : CrossDomainWindowType | ProxyWindow, origin : string, { id, name } : { id : string, name : string }, { send } : { send : SendType }) : (...args : $ReadOnlyArray<mixed>) => ZalgoPromise<T> {\n    const getDeserializedFunction = (opts? : Object = {}) => {\n        function crossDomainFunctionWrapper<X : mixed>() : ZalgoPromise<X> {\n            let originalStack;\n    \n            if (__DEBUG__) {\n                originalStack = (new Error(`Original call to ${ name }():`)).stack;\n            }\n    \n            return ProxyWindow.toProxyWindow(source, { send }).awaitWindow().then(win => {\n                const meth = lookupMethod(win, id);\n    \n                if (meth && meth.val !== crossDomainFunctionWrapper) {\n                    return meth.val.apply({ source: window, origin: getDomain() }, arguments);\n                } else {\n                    // $FlowFixMe\n                    const options = { domain: origin, fireAndForget: opts.fireAndForget };\n                    const args = Array.prototype.slice.call(arguments);\n\n                    return send(win, MESSAGE_NAME.METHOD, { id, name, args }, options)\n                        .then(res => {\n                            if (!opts.fireAndForget) {\n                                return res.data.result;\n                            }\n                        });\n                }\n    \n            }).catch(err => {\n                // $FlowFixMe\n                if (__DEBUG__ && originalStack && err.stack) {\n                    // $FlowFixMe\n                    err.stack = `${ err.stack }\\n\\n${ originalStack }`;\n                }\n                throw err;\n            });\n        }\n\n        crossDomainFunctionWrapper.__name__ = name;\n        crossDomainFunctionWrapper.__origin__ = origin;\n        crossDomainFunctionWrapper.__source__ = source;\n        crossDomainFunctionWrapper.__id__ = id;\n\n        crossDomainFunctionWrapper.origin = origin;\n\n        return crossDomainFunctionWrapper;\n    };\n\n    const crossDomainFunctionWrapper = getDeserializedFunction();\n    crossDomainFunctionWrapper.fireAndForget = getDeserializedFunction({ fireAndForget: true });\n\n    return crossDomainFunctionWrapper;\n}\n","/* @flow */\n\nimport { type CrossDomainWindowType, isWindow, type DomainMatcher } from 'cross-domain-utils/src';\nimport { TYPE, serialize, deserialize, type Thenable } from 'universal-serialize/src';\n\nimport { SERIALIZATION_TYPE } from '../conf';\nimport type { OnType, SendType } from '../types';\n\nimport { serializeFunction, deserializeFunction, type SerializedFunction } from './function';\nimport { serializePromise, deserializePromise, type SerializedPromise } from './promise';\nimport { serializeWindow, deserializeWindow, type SerializedWindow, ProxyWindow } from './window';\n\nexport function serializeMessage<T : mixed>(destination : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher, obj : T, { on, send } : { on : OnType, send : SendType }) : string {\n    return serialize(obj, {\n        [ TYPE.PROMISE ]:  (val : Thenable, key : string) : SerializedPromise => serializePromise(destination, domain, val, key, { on, send }),\n        [ TYPE.FUNCTION ]: (val : Function, key : string) : SerializedFunction => serializeFunction(destination, domain, val, key, { on, send }),\n        [ TYPE.OBJECT ]:   (val : CrossDomainWindowType) : Object | SerializedWindow => {\n            return (isWindow(val) || ProxyWindow.isProxyWindow(val)) ? serializeWindow(destination, domain, val, { on, send }) : val;\n        }\n    });\n}\n\nexport function deserializeMessage<T : mixed>(source : CrossDomainWindowType | ProxyWindow, origin : string, message : string, { on, send } : { on : OnType, send : SendType }) : T {\n    return deserialize(message, {\n        [ SERIALIZATION_TYPE.CROSS_DOMAIN_ZALGO_PROMISE ]: (serializedPromise)  => deserializePromise(source, origin, serializedPromise),\n        [ SERIALIZATION_TYPE.CROSS_DOMAIN_FUNCTION ]:      (serializedFunction) => deserializeFunction(source, origin, serializedFunction, { on, send }),\n        [ SERIALIZATION_TYPE.CROSS_DOMAIN_WINDOW ]:        (serializedWindow)   => deserializeWindow(source, origin, serializedWindow, { on, send })\n    });\n}\n","/* @flow */\n\nimport { type CrossDomainWindowType, type DomainMatcher } from 'cross-domain-utils/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { serializeType, type CustomSerializedType, type Thenable } from 'universal-serialize/src';\n\nimport { SERIALIZATION_TYPE } from '../conf';\nimport type { OnType, SendType } from '../types';\n\nimport { serializeFunction, type SerializedFunction } from './function';\nimport { ProxyWindow } from './window';\n\nexport type SerializedPromise = CustomSerializedType<typeof SERIALIZATION_TYPE.CROSS_DOMAIN_ZALGO_PROMISE, {\n    then : SerializedFunction\n}>;\n\nexport function serializePromise(destination : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher, val : Thenable, key : string, { on, send } : { on : OnType, send : SendType }) : SerializedPromise {\n    return serializeType(SERIALIZATION_TYPE.CROSS_DOMAIN_ZALGO_PROMISE, {\n        then: serializeFunction(destination, domain, (resolve, reject) => val.then(resolve, reject), key, { on, send })\n    });\n}\n\nexport function deserializePromise<T>(source : CrossDomainWindowType | ProxyWindow, origin : string, { then } : { then : Function }) : ZalgoPromise<T> {\n    return new ZalgoPromise(then);\n}\n","/* @flow */\n\nimport { isSameDomain, isSameTopWindow, isActuallySameDomain, getActualDomain,\n    getDomain, type CrossDomainWindowType, type DomainMatcher, PROTOCOL } from 'cross-domain-utils/src';\n\nimport { SEND_STRATEGY, WILDCARD } from '../../conf';\nimport { needsGlobalMessagingForBrowser } from '../../lib';\nimport { getGlobal } from '../../global';\nimport { sendBridgeMessage, needsBridgeForBrowser, isBridge } from '../../bridge';\n\nexport const SEND_MESSAGE_STRATEGIES = {};\n\nSEND_MESSAGE_STRATEGIES[SEND_STRATEGY.POST_MESSAGE] = (win : CrossDomainWindowType, serializedMessage : string, domain : DomainMatcher) => {\n\n    if (__TEST__) {\n        if (needsGlobalMessagingForBrowser() && isSameTopWindow(window, win) === false) {\n            return;\n        }\n    }\n\n    let domains;\n\n    if (Array.isArray(domain)) {\n        domains = domain;\n    } else if (typeof domain === 'string') {\n        domains = [ domain ];\n    } else {\n        domains = [ WILDCARD ];\n    }\n\n    domains = domains.map(dom => {\n\n        if (__TEST__) {\n            if (dom.indexOf(PROTOCOL.MOCK) === 0) {\n                if (window.location.protocol === PROTOCOL.FILE) {\n                    return WILDCARD;\n                }\n\n                if (!isActuallySameDomain(win)) {\n                    throw new Error(`Attempting to send messsage to mock domain ${ dom }, but window is actually cross-domain`);\n                }\n\n                // $FlowFixMe\n                return getActualDomain(win);\n\n            }\n        }\n        \n        if (dom.indexOf(PROTOCOL.FILE) === 0) {\n            return WILDCARD;\n        }\n\n        return dom;\n    });\n\n    domains.forEach(dom => {\n        win.postMessage(serializedMessage, dom);\n    });\n};\n\nif (__POST_ROBOT__.__IE_POPUP_SUPPORT__) {\n\n    SEND_MESSAGE_STRATEGIES[SEND_STRATEGY.BRIDGE] = (win : CrossDomainWindowType, serializedMessage : string, domain : string) => {\n\n        if (!needsBridgeForBrowser() && !isBridge()) {\n            return;\n        }\n\n        if (isSameDomain(win)) {\n            throw new Error(`Post message through bridge disabled between same domain windows`);\n        }\n\n        if (isSameTopWindow(window, win) !== false) {\n            throw new Error(`Can only use bridge to communicate between two different windows, not between frames`);\n        }\n\n        sendBridgeMessage(win, domain, serializedMessage);\n    };\n}\n\nif (__POST_ROBOT__.__IE_POPUP_SUPPORT__ || __POST_ROBOT__.__GLOBAL_MESSAGE_SUPPORT__) {\n    \n    SEND_MESSAGE_STRATEGIES[SEND_STRATEGY.GLOBAL] = (win : CrossDomainWindowType, serializedMessage : string) => {\n\n        if (!needsGlobalMessagingForBrowser()) {\n            return;\n        }\n\n        if (!isSameDomain(win)) {\n            throw new Error(`Post message through global disabled between different domain windows`);\n        }\n\n        if (isSameTopWindow(window, win) !== false) {\n            throw new Error(`Can only use global to communicate between two different windows, not between frames`);\n        }\n\n        // $FlowFixMe\n        const foreignGlobal = getGlobal(win);\n\n        if (!foreignGlobal) {\n            throw new Error(`Can not find postRobot global on foreign window`);\n        }\n\n        foreignGlobal.receiveMessage({\n            source: window,\n            origin: getDomain(),\n            data:   serializedMessage\n        });\n    };\n}\n","/* @flow */\n\nimport { isWindowClosed, getDomain, type CrossDomainWindowType, type DomainMatcher } from 'cross-domain-utils/src';\nimport { uniqueID, stringifyError } from 'belter/src';\n\nimport { serializeMessage } from '../../serialize';\nimport type { Message } from '../types';\nimport type { OnType, SendType } from '../../types';\n\nimport { SEND_MESSAGE_STRATEGIES } from './strategies';\n\nexport function sendMessage(win : CrossDomainWindowType, domain : DomainMatcher, message : Message, { on, send } : { on : OnType, send : SendType }) {\n    if (isWindowClosed(win)) {\n        throw new Error('Window is closed');\n    }\n    \n    const serializedMessage = serializeMessage(win, domain, {\n        [ __POST_ROBOT__.__GLOBAL_KEY__ ]: {\n            id:     uniqueID(),\n            origin: getDomain(window),\n            ...message\n        }\n    }, { on, send });\n\n    const strategies = Object.keys(SEND_MESSAGE_STRATEGIES);\n    const errors = [];\n\n    for (const strategyName of strategies) {\n        try {\n            SEND_MESSAGE_STRATEGIES[strategyName](win, serializedMessage, domain);\n        } catch (err) {\n            errors.push(err);\n        }\n    }\n\n    if (errors.length === strategies.length) {\n        throw new Error(`All post-robot messaging strategies failed:\\n\\n${ errors.map(stringifyError).join('\\n\\n') }`);\n    }\n}\n","/* @flow */\n\nimport { getUserAgent } from 'cross-domain-utils/src';\n\nexport function needsGlobalMessagingForBrowser() : boolean {\n\n    if (getUserAgent(window).match(/MSIE|rv:11|trident|edge\\/12|edge\\/13/i)) {\n        return true;\n    }\n\n    return false;\n}\n","/* @flow */\n\nimport { type ZalgoPromise } from 'zalgo-promise/src';\nimport { matchDomain, type CrossDomainWindowType, type DomainMatcher } from 'cross-domain-utils/src';\nimport { isRegex, getOrSet } from 'belter/src';\n\nimport { getWildcard, type WildCard, globalStore, windowStore } from '../global';\nimport { WILDCARD } from '../conf';\n\nexport function resetListeners() {\n    const responseListeners = globalStore('responseListeners');\n    const erroredResponseListeners = globalStore('erroredResponseListeners');\n    responseListeners.reset();\n    erroredResponseListeners.reset();\n}\n\nconst __DOMAIN_REGEX__ = '__domain_regex__';\n\nexport type RequestListenerType = {|\n    handler : ({ source : CrossDomainWindowType, origin : string, data : mixed }) => (mixed | ZalgoPromise<mixed>),\n    handleError : (err : mixed) => void,\n    window : ?CrossDomainWindowType,\n    name : string,\n    domain : DomainMatcher\n|};\n\nexport type ResponseListenerType = {|\n    name : string,\n    win : CrossDomainWindowType,\n    domain : DomainMatcher,\n    promise : ZalgoPromise<*>,\n    ack? : ?boolean,\n    cancelled? : ?boolean\n|};\n\nexport function addResponseListener(hash : string, listener : ResponseListenerType) {\n    const responseListeners = globalStore('responseListeners');\n    responseListeners.set(hash, listener);\n}\n\nexport function getResponseListener(hash : string) : ?ResponseListenerType {\n    const responseListeners = globalStore('responseListeners');\n    return responseListeners.get(hash);\n}\n\nexport function deleteResponseListener(hash : string) {\n    const responseListeners = globalStore('responseListeners');\n    responseListeners.del(hash);\n}\n\nexport function cancelResponseListeners() {\n    const responseListeners = globalStore('responseListeners');\n    for (const hash of responseListeners.keys()) {\n        const listener = responseListeners.get(hash);\n        if (listener) {\n            listener.cancelled = true;\n        }\n        responseListeners.del(hash);\n    }\n}\n\nexport function markResponseListenerErrored(hash : string) {\n    const erroredResponseListeners = globalStore('erroredResponseListeners');\n    erroredResponseListeners.set(hash, true);\n}\n\nexport function isResponseListenerErrored(hash : string) : boolean {\n    const erroredResponseListeners = globalStore('erroredResponseListeners');\n    return erroredResponseListeners.has(hash);\n}\n\nexport function getRequestListener({ name, win, domain } : { name : string, win : ?(CrossDomainWindowType | WildCard), domain : ?(string | RegExp) }) : ?RequestListenerType {\n    const requestListeners = windowStore('requestListeners');\n\n    if (win === WILDCARD) {\n        win = null;\n    }\n\n    if (domain === WILDCARD) {\n        domain = null;\n    }\n\n    if (!name) {\n        throw new Error(`Name required to get request listener`);\n    }\n\n    for (const winQualifier of [ win, getWildcard() ]) {\n        if (!winQualifier) {\n            continue;\n        }\n\n        const nameListeners = requestListeners.get(winQualifier);\n\n        if (!nameListeners) {\n            continue;\n        }\n\n        const domainListeners = nameListeners[name];\n\n        if (!domainListeners) {\n            continue;\n        }\n\n        if (domain && typeof domain === 'string') {\n            if (domainListeners[domain]) {\n                return domainListeners[domain];\n            }\n\n            if (domainListeners[__DOMAIN_REGEX__]) {\n                for (const { regex, listener } of domainListeners[__DOMAIN_REGEX__]) {\n                    if (matchDomain(regex, domain)) {\n                        return listener;\n                    }\n                }\n            }\n        }\n\n        if (domainListeners[WILDCARD]) {\n            return domainListeners[WILDCARD];\n        }\n    }\n}\n\nexport function addRequestListener({ name, win, domain } : { name : string, win : ?(CrossDomainWindowType | WildCard), domain : ?DomainMatcher }, listener : RequestListenerType) : { cancel : () => void } {\n    const requestListeners = windowStore('requestListeners');\n\n    if (!name || typeof name !== 'string') {\n        throw new Error(`Name required to add request listener`);\n    }\n\n    if (Array.isArray(win)) {\n        const listenersCollection = [];\n\n        for (const item of win) {\n            listenersCollection.push(addRequestListener({ name, domain, win: item }, listener));\n        }\n\n        return {\n            cancel() {\n                for (const cancelListener of listenersCollection) {\n                    cancelListener.cancel();\n                }\n            }\n        };\n    }\n\n    if (Array.isArray(domain)) {\n        const listenersCollection = [];\n\n        for (const item of domain) {\n            listenersCollection.push(addRequestListener({ name, win, domain: item }, listener));\n        }\n\n        return {\n            cancel() {\n                for (const cancelListener of listenersCollection) {\n                    cancelListener.cancel();\n                }\n            }\n        };\n    }\n\n    const existingListener = getRequestListener({ name, win, domain });\n\n    if (!win || win === WILDCARD) {\n        win = getWildcard();\n    }\n\n    domain = domain || WILDCARD;\n\n    if (existingListener) {\n        if (win && domain) {\n            throw new Error(`Request listener already exists for ${ name } on domain ${ domain.toString() } for ${ win === getWildcard() ? 'wildcard' : 'specified' } window`);\n        } else if (win) {\n            throw new Error(`Request listener already exists for ${ name } for ${ win === getWildcard() ? 'wildcard' : 'specified' } window`);\n        } else if (domain) {\n            throw new Error(`Request listener already exists for ${ name } on domain ${ domain.toString() }`);\n        } else {\n            throw new Error(`Request listener already exists for ${ name }`);\n        }\n    }\n\n    const nameListeners = requestListeners.getOrSet(win, () => ({}));\n    // $FlowFixMe\n    const domainListeners = getOrSet(nameListeners, name, () => ({}));\n\n    const strDomain = domain.toString();\n\n    let regexListeners;\n    let regexListener;\n\n    if (isRegex(domain)) {\n        regexListeners = getOrSet(domainListeners, __DOMAIN_REGEX__, () => []);\n        regexListener = { regex: domain, listener };\n        regexListeners.push(regexListener);\n    } else {\n        domainListeners[strDomain] = listener;\n    }\n\n    return {\n        cancel() {\n            delete domainListeners[strDomain];\n\n            if (regexListener) {\n                regexListeners.splice(regexListeners.indexOf(regexListener, 1));\n\n                if (!regexListeners.length) {\n                    delete domainListeners[__DOMAIN_REGEX__];\n                }\n            }\n\n            if (!Object.keys(domainListeners).length) {\n                // $FlowFixMe\n                delete nameListeners[name];\n            }\n\n            // $FlowFixMe\n            if (win && !Object.keys(nameListeners).length) {\n                requestListeners.del(win);\n            }\n        }\n    };\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { isWindowClosed, matchDomain, stringifyDomainPattern, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { noop } from 'belter/src';\n\nimport { MESSAGE_TYPE, MESSAGE_ACK, MESSAGE_NAME } from '../../conf';\nimport { sendMessage } from '../send';\nimport { getRequestListener, getResponseListener, deleteResponseListener, isResponseListenerErrored } from '../listeners';\nimport type { RequestMessage, AckResponseMessage, SuccessResponseMessage, ErrorResponseMessage } from '../types';\nimport type { OnType, SendType } from '../../types';\n\nexport const RECEIVE_MESSAGE_TYPES = {\n\n    [ MESSAGE_TYPE.REQUEST ](source : CrossDomainWindowType, origin : string, message : RequestMessage, { on, send } : { on : OnType, send : SendType }) : ZalgoPromise<void> {\n\n        const options = getRequestListener({ name: message.name, win: source, domain: origin });\n\n        const logName = (message.name === MESSAGE_NAME.METHOD && message.data && typeof message.data.name === 'string') ? `${ message.data.name }()` : message.name;\n\n        if (__DEBUG__) {\n            // eslint-disable-next-line no-console\n            console.info('receive::req', logName, origin, '\\n\\n', message.data);\n        }\n\n        function sendResponse(type : $Values<typeof MESSAGE_TYPE>, ack? : $Values<typeof MESSAGE_ACK>, response = {}) {\n\n            if (message.fireAndForget || isWindowClosed(source)) {\n                return;\n            }\n\n            if (__DEBUG__ && type !== MESSAGE_TYPE.ACK) {\n                if (ack === MESSAGE_ACK.SUCCESS) {\n                    // $FlowFixMe\n                    console.info('respond::res', logName, origin, '\\n\\n', response.data);  // eslint-disable-line no-console\n                } else if (ack === MESSAGE_ACK.ERROR) {\n                    // $FlowFixMe\n                    console.error('respond::err', logName, origin, '\\n\\n', response.error); // eslint-disable-line no-console\n                }\n            }\n\n            // $FlowFixMe\n            sendMessage(source, origin, {\n                type,\n                ack,\n                hash:   message.hash,\n                name:   message.name,\n                ...response\n            }, { on, send });\n        }\n\n        return ZalgoPromise.all([\n\n            sendResponse(MESSAGE_TYPE.ACK),\n\n            ZalgoPromise.try(() => {\n\n                if (!options) {\n                    throw new Error(`No handler found for post message: ${ message.name } from ${ origin } in ${ window.location.protocol }//${ window.location.host }${ window.location.pathname }`);\n                }\n\n                if (!matchDomain(options.domain, origin)) {\n                    throw new Error(`Request origin ${ origin } does not match domain ${ options.domain.toString() }`);\n                }\n\n                const data = message.data;\n\n                return options.handler({ source, origin, data });\n\n            }).then(data => {\n                return sendResponse(MESSAGE_TYPE.RESPONSE, MESSAGE_ACK.SUCCESS, { data });\n\n            }, error => {\n                return sendResponse(MESSAGE_TYPE.RESPONSE, MESSAGE_ACK.ERROR, { error });\n            })\n\n        ]).then(noop).catch(err => {\n            if (options && options.handleError) {\n                return options.handleError(err);\n            } else {\n                throw err;\n            }\n        });\n    },\n\n    [ MESSAGE_TYPE.ACK ](source : CrossDomainWindowType, origin : string, message : AckResponseMessage) {\n\n        if (isResponseListenerErrored(message.hash)) {\n            return;\n        }\n\n        const options = getResponseListener(message.hash);\n\n        if (!options) {\n            throw new Error(`No handler found for post message ack for message: ${ message.name } from ${ origin } in ${ window.location.protocol }//${ window.location.host }${ window.location.pathname }`);\n        }\n\n        if (!matchDomain(options.domain, origin)) {\n            throw new Error(`Ack origin ${ origin } does not match domain ${ options.domain.toString() }`);\n        }\n\n        if (source !== options.win) {\n            throw new Error(`Ack source does not match registered window`);\n        }\n\n        options.ack = true;\n    },\n\n    [ MESSAGE_TYPE.RESPONSE ](source : CrossDomainWindowType, origin : string, message : SuccessResponseMessage | ErrorResponseMessage) : void | ZalgoPromise<void> {\n\n        if (isResponseListenerErrored(message.hash)) {\n            return;\n        }\n\n        const options = getResponseListener(message.hash);\n\n        if (!options) {\n            throw new Error(`No handler found for post message response for message: ${ message.name } from ${ origin } in ${ window.location.protocol }//${ window.location.host }${ window.location.pathname }`);\n        }\n\n        if (!matchDomain(options.domain, origin)) {\n            throw new Error(`Response origin ${ origin } does not match domain ${ stringifyDomainPattern(options.domain) }`);\n        }\n\n        if (source !== options.win) {\n            throw new Error(`Response source does not match registered window`);\n        }\n\n        deleteResponseListener(message.hash);\n\n        const logName = (message.name === MESSAGE_NAME.METHOD && message.data && typeof message.data.name === 'string') ? `${ message.data.name }()` : message.name;\n\n        if (message.ack === MESSAGE_ACK.ERROR) {\n            if (__DEBUG__) {\n                console.error('receive::err', logName, origin, '\\n\\n', message.error); // eslint-disable-line no-console\n            }\n\n            options.promise.reject(message.error);\n\n        } else if (message.ack === MESSAGE_ACK.SUCCESS) {\n            if (__DEBUG__) {\n                console.info('receive::res', logName, origin, '\\n\\n', message.data); // eslint-disable-line no-console\n            }\n\n            options.promise.resolve({ source, origin, data: message.data });\n        }\n    }\n};\n","/* @flow */\n\nimport { isWindowClosed, type CrossDomainWindowType, getDomain, isSameTopWindow, PROTOCOL  } from 'cross-domain-utils/src';\nimport { addEventListener, noop } from 'belter/src';\n\nimport { markWindowKnown, needsGlobalMessagingForBrowser } from '../../lib';\nimport { deserializeMessage } from '../../serialize';\nimport { getGlobal, globalStore } from '../../global';\nimport type { OnType, SendType, MessageEvent, CancelableType } from '../../types';\n\nimport { RECEIVE_MESSAGE_TYPES } from './types';\n\nfunction parseMessage(message : string, source : CrossDomainWindowType, origin : string, { on, send } : { on : OnType, send : SendType }) : ?Object {\n    let parsedMessage;\n\n    try {\n        parsedMessage = deserializeMessage(source, origin, message, { on, send });\n    } catch (err) {\n        return;\n    }\n\n    if (!parsedMessage) {\n        return;\n    }\n\n    if (typeof parsedMessage !== 'object' || parsedMessage === null) {\n        return;\n    }\n\n    parsedMessage = parsedMessage[__POST_ROBOT__.__GLOBAL_KEY__];\n\n    if (!parsedMessage || typeof parsedMessage !== 'object' || parsedMessage === null) {\n        return;\n    }\n\n    if (!parsedMessage.type || typeof parsedMessage.type !== 'string') {\n        return;\n    }\n\n    if (!RECEIVE_MESSAGE_TYPES[parsedMessage.type]) {\n        return;\n    }\n\n    return parsedMessage;\n}\n\nexport function receiveMessage(event : MessageEvent, { on, send } : { on : OnType, send : SendType }) {\n    const receivedMessages = globalStore('receivedMessages');\n\n    if (!window || window.closed) {\n        throw new Error(`Message recieved in closed window`);\n    }\n\n    try {\n        if (!event.source) {\n            return;\n        }\n    } catch (err) {\n        return;\n    }\n\n    let { source, origin, data } = event;\n\n    if (__TEST__) {\n        // $FlowFixMe\n        origin = getDomain(source);\n    }\n\n    const message = parseMessage(data, source, origin, { on, send });\n\n    if (!message) {\n        return;\n    }\n\n    markWindowKnown(source);\n\n    if (receivedMessages.has(message.id)) {\n        return;\n    }\n\n    receivedMessages.set(message.id, true);\n\n    if (isWindowClosed(source) && !message.fireAndForget) {\n        return;\n    }\n\n    if (message.origin.indexOf(PROTOCOL.FILE) === 0) {\n        origin = `${ PROTOCOL.FILE }//`;\n    }\n\n    RECEIVE_MESSAGE_TYPES[message.type](source, origin, message, { on, send });\n}\n\nexport function setupGlobalReceiveMessage({ on, send } : { on : OnType, send : SendType }) {\n    const global = getGlobal();\n    global.receiveMessage = global.receiveMessage || (message => receiveMessage(message, { on, send }));\n}\n\ntype ListenerEvent = {|\n    source : CrossDomainWindowType,\n    origin : string,\n    data : string,\n    sourceElement : CrossDomainWindowType,\n    originalEvent? : { origin : string }\n|};\n\nexport function messageListener(event : ListenerEvent, { on, send } : { on : OnType, send : SendType }) {\n\n    try {\n        noop(event.source);\n    } catch (err) {\n        return;\n    }\n\n    const source = event.source || event.sourceElement;\n    let origin = event.origin || (event.originalEvent && event.originalEvent.origin);\n    const data = event.data;\n\n    if (origin === 'null') {\n        origin = `${ PROTOCOL.FILE }//`;\n    }\n\n    if (!source) {\n        return;\n    }\n\n    if (!origin) {\n        throw new Error(`Post message did not have origin domain`);\n    }\n\n    if (__TEST__) {\n        if (needsGlobalMessagingForBrowser() && isSameTopWindow(source, window) === false) {\n            return;\n        }\n    }\n\n    receiveMessage({ source, origin, data }, { on, send });\n}\n\nexport function listenForMessages({ on, send } : { on : OnType, send : SendType }) : CancelableType {\n    return globalStore().getOrSet('postMessageListener', () => {\n        // $FlowFixMe\n        return addEventListener(window, 'message', event => {\n            // $FlowFixMe\n            messageListener(event, { on, send });\n        });\n    });\n}\n\nexport function stopListenForMessages() {\n    const listener = globalStore().get('postMessageListener');\n    if (listener) {\n        listener.cancel();\n    }\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\n\nimport { addRequestListener, type RequestListenerType } from '../drivers';\nimport { WILDCARD } from '../conf';\nimport type { ServerOptionsType, HandlerType, CancelableType } from '../types';\n\nexport function on(name : string, options : ServerOptionsType | HandlerType, handler : ?HandlerType) : CancelableType {\n\n    if (!name) {\n        throw new Error('Expected name');\n    }\n\n    if (typeof options === 'function') {\n        handler = options;\n        // $FlowFixMe\n        options = {};\n    }\n\n    if (!handler) {\n        throw new Error('Expected handler');\n    }\n\n    options = options || {};\n    options.name = name;\n    options.handler = handler || options.handler;\n\n    const win = options.window;\n    const domain = options.domain;\n\n    const listenerOptions : RequestListenerType = {\n        handler:     options.handler,\n        handleError: options.errorHandler || (err => {\n            throw err;\n        }),\n        window: win,\n        domain: domain || WILDCARD,\n        name\n    };\n\n    const requestListener = addRequestListener({ name, win, domain }, listenerOptions);\n\n    return {\n        cancel() {\n            requestListener.cancel();\n        }\n    };\n}\n\nexport function once(name : string, options? : ServerOptionsType | HandlerType, handler? : HandlerType) : ZalgoPromise<{ source : mixed, origin : string, data : Object }> {\n    \n    // $FlowFixMe\n    options = options || {};\n    if (typeof options === 'function') {\n        handler = options;\n        // $FlowFixMe\n        options = {};\n    }\n\n    const promise = new ZalgoPromise();\n    let listener; // eslint-disable-line prefer-const\n\n    options.errorHandler = (err) => {\n        listener.cancel();\n        promise.reject(err);\n    };\n\n    listener = on(name, options, event => {\n        listener.cancel();\n        promise.resolve(event);\n        if (handler) {\n            return handler(event);\n        }\n    });\n\n    promise.cancel = listener.cancel;\n    return promise;\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { isAncestor, isWindowClosed, getDomain, matchDomain, type CrossDomainWindowType, type DomainMatcher } from 'cross-domain-utils/src';\nimport { uniqueID, isRegex, noop, safeInterval, stringify } from 'belter/src';\n\n\nimport { CHILD_WINDOW_TIMEOUT, MESSAGE_TYPE, WILDCARD, MESSAGE_NAME, ACK_TIMEOUT, RES_TIMEOUT, ACK_TIMEOUT_KNOWN, RESPONSE_CYCLE_TIME } from '../conf';\nimport { sendMessage, addResponseListener, deleteResponseListener, markResponseListenerErrored, type ResponseListenerType } from '../drivers';\nimport { awaitWindowHello, sayHello, isWindowKnown } from '../lib';\nimport { windowStore } from '../global';\nimport type { SendType } from '../types';\n\nimport { on } from './on';\n\nfunction validateOptions(name : string, win : CrossDomainWindowType, domain : ?DomainMatcher) {\n    if (!name) {\n        throw new Error('Expected name');\n    }\n\n    if (domain) {\n        if (typeof domain !== 'string' && !Array.isArray(domain) && !isRegex(domain)) {\n            throw new TypeError(`Expected domain to be a string, array, or regex`);\n        }\n    }\n\n    if (isWindowClosed(win)) {\n        throw new Error('Target window is closed');\n    }\n}\n\nfunction normalizeDomain(win : CrossDomainWindowType, domain : DomainMatcher, childTimeout : number, { send } : { send : SendType }) : ZalgoPromise<string | $ReadOnlyArray<string>> {\n    return ZalgoPromise.try(() => {\n        if (isAncestor(window, win)) {\n            return awaitWindowHello(win, childTimeout);\n        } else if (isRegex(domain)) {\n            // $FlowFixMe\n            return sayHello(win, { send });\n        } else {\n            return { domain };\n        }\n    // $FlowFixMe\n    }).then(({ domain: normalizedDomain }) => {\n\n        // $FlowFixMe\n        return normalizedDomain;\n    });\n}\n\nexport const send : SendType = (win, name, data, options) => {\n\n    // $FlowFixMe\n    options = options || {};\n    let domain = options.domain || WILDCARD;\n    const responseTimeout = options.timeout || RES_TIMEOUT;\n    const childTimeout = options.timeout || CHILD_WINDOW_TIMEOUT;\n    const fireAndForget = options.fireAndForget || false;\n\n    // $FlowFixMe\n    return ZalgoPromise.try(() => {\n        validateOptions(name, win, domain);\n        return normalizeDomain(win, domain, childTimeout, { send });\n    }).then(targetDomain => {\n\n        if (!matchDomain(domain, targetDomain)) {\n            throw new Error(`Domain ${ stringify(domain) } does not match ${ stringify(targetDomain) }`);\n        }\n\n        domain = targetDomain;\n\n        const logName = (name === MESSAGE_NAME.METHOD && data && typeof data.name === 'string') ? `${ data.name }()` : name;\n\n        if (__DEBUG__) {\n            console.info('send::req', logName, domain, '\\n\\n', data); // eslint-disable-line no-console\n        }\n\n        const promise = new ZalgoPromise();\n        const hash = `${ name }_${ uniqueID() }`;\n\n        if (!fireAndForget) {\n            const responseListener : ResponseListenerType = { name, win, domain, promise };\n            addResponseListener(hash, responseListener);\n\n            const reqPromises = windowStore('requestPromises').getOrSet(win, () => []);\n            reqPromises.push(promise);\n\n            promise.catch(() => {\n                markResponseListenerErrored(hash);\n                deleteResponseListener(hash);\n            });\n\n            const totalAckTimeout = isWindowKnown(win) ? ACK_TIMEOUT_KNOWN : ACK_TIMEOUT;\n            const totalResTimeout = responseTimeout;\n\n            let ackTimeout = totalAckTimeout;\n            let resTimeout = totalResTimeout;\n        \n            const interval = safeInterval(() => {\n                if (isWindowClosed(win)) {\n                    return promise.reject(new Error(`Window closed for ${ name } before ${ responseListener.ack ? 'response' : 'ack' }`));\n                }\n\n                if (responseListener.cancelled) {\n                    return promise.reject(new Error(`Response listener was cancelled for ${ name }`));\n                }\n\n                ackTimeout = Math.max(ackTimeout - RESPONSE_CYCLE_TIME, 0);\n                if (resTimeout !== -1) {\n                    resTimeout = Math.max(resTimeout - RESPONSE_CYCLE_TIME, 0);\n                }\n\n                if (!responseListener.ack && ackTimeout === 0) {\n                    return promise.reject(new Error(`No ack for postMessage ${ logName } in ${ getDomain() } in ${ totalAckTimeout }ms`));\n\n                } else if (resTimeout === 0) {\n                    return promise.reject(new Error(`No response for postMessage ${ logName } in ${ getDomain() } in ${ totalResTimeout }ms`));\n                }\n            }, RESPONSE_CYCLE_TIME);\n\n            promise.finally(() => {\n                interval.cancel();\n                reqPromises.splice(reqPromises.indexOf(promise, 1));\n            }).catch(noop);\n        }\n\n        sendMessage(win, domain, {\n            type: MESSAGE_TYPE.REQUEST,\n            hash,\n            name,\n            data,\n            fireAndForget\n        }, { on, send });\n    \n        return fireAndForget ? promise.resolve() : promise;\n    });\n};\n","/* @flow */\n\nimport { setup } from './setup';\nimport { setupBridge, openBridge, linkWindow, linkUrl, isBridge, needsBridge, needsBridgeForBrowser, hasBridge,\n    needsBridgeForWin, needsBridgeForDomain, destroyBridges } from './bridge';\n\nexport { ZalgoPromise as Promise } from 'zalgo-promise/src';\n\nexport * from './types';\nexport { ProxyWindow } from './serialize';\nexport { setup, destroy, serializeMessage, deserializeMessage, toProxyWindow } from './setup';\nexport { on, once, send } from './public';\nexport { markWindowKnown } from './lib';\nexport { cleanUpWindow } from './clean';\nexport let bridge;\n\nif (__POST_ROBOT__.__IE_POPUP_SUPPORT__) {\n    bridge = { setupBridge, openBridge, linkWindow, linkUrl, isBridge, needsBridge,\n        needsBridgeForBrowser, hasBridge, needsBridgeForWin, needsBridgeForDomain, destroyBridges };\n}\n\nif (__POST_ROBOT__.__AUTO_SETUP__) {\n    setup();\n}\n","/* @flow */\n\nimport type { CrossDomainWindowType, DomainMatcher } from 'cross-domain-utils/src';\n\nimport { initHello } from './lib';\nimport { listenForMessages, stopListenForMessages, receiveMessage, setupGlobalReceiveMessage, cancelResponseListeners } from './drivers';\nimport { getGlobal, deleteGlobal } from './global';\nimport { on, send } from './public';\nimport { setupBridge } from './bridge';\nimport { serializeMessage as internalSerializeMessage, deserializeMessage as internalDeserializeMessage, ProxyWindow } from './serialize';\n\nexport function serializeMessage<T>(destination : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher, obj : T) : string {\n    return internalSerializeMessage(destination, domain, obj, { on, send });\n}\n\nexport function deserializeMessage<T : mixed>(source : CrossDomainWindowType | ProxyWindow, origin : string, message : string) : T {\n    return internalDeserializeMessage(source, origin, message, { on, send });\n}\n\nexport function toProxyWindow(win : CrossDomainWindowType | ProxyWindow) : ProxyWindow {\n    return ProxyWindow.toProxyWindow(win, { send });\n}\n\nexport function setup() {\n    if (!getGlobal().initialized) {\n        getGlobal().initialized = true;\n    \n        setupGlobalReceiveMessage({ on, send });\n        listenForMessages({ on, send });\n    \n        if (__POST_ROBOT__.__IE_POPUP_SUPPORT__) {\n            setupBridge({ on, send, receiveMessage });\n        }\n\n        initHello({ on, send });\n    }\n}\n\nexport function destroy() {\n    cancelResponseListeners();\n    stopListenForMessages();\n    deleteGlobal();\n}\n","/* @flow */\n\nimport { type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { noop } from 'belter/src';\n\nimport { windowStore } from './global';\n\nexport function cleanUpWindow(win : CrossDomainWindowType) {\n    const requestPromises = windowStore('requestPromises');\n    for (const promise of requestPromises.get(win, [])) {\n        promise.reject(new Error(`Window cleaned up before response`)).catch(noop);\n    }\n}\n","/* @flow */\n\nimport type { ZalgoPromise } from 'zalgo-promise/src';\nimport type { CrossDomainWindowType, DomainMatcher } from 'cross-domain-utils/src';\n\n// export something to force webpack to see this as an ES module\nexport const TYPES = true;\n\n// eslint-disable-next-line flowtype/require-exact-type\nexport type CancelableType = {\n    cancel : () => void\n};\n\nexport type ErrorHandlerType = (err : mixed) => void;\n\nexport type HandlerType = ({\n    source : CrossDomainWindowType,\n    origin : string,\n    data : any // eslint-disable-line flowtype/no-weak-types\n}) => (void | any | ZalgoPromise<any>); // eslint-disable-line flowtype/no-weak-types\n\nexport type ServerOptionsType = {|\n    handler? : ?HandlerType,\n    errorHandler? : ?ErrorHandlerType,\n    window? : CrossDomainWindowType,\n    name? : ?string,\n    domain? : ?DomainMatcher,\n    once? : ?boolean,\n    errorOnClose? : ?boolean\n|};\n\nexport type OnType = (\n    name : string,\n    options : ServerOptionsType | HandlerType,\n    handler : ?HandlerType\n) => CancelableType;\n\ntype RegularRequestOptionsType = {|\n    domain? : ?DomainMatcher,\n    fireAndForget? : false,\n    timeout? : ?number\n|};\n\ntype FireAndForgetRequestOptionsType = {|\n    domain? : ?DomainMatcher,\n    fireAndForget : true,\n    timeout? : ?number\n|};\n\nexport type RequestOptionsType = RegularRequestOptionsType | FireAndForgetRequestOptionsType;\n\nexport type ResponseMessageEvent = {|\n    source : CrossDomainWindowType,\n    origin : string,\n    data : Object\n|};\n\ntype RegularSendType = (\n    win : CrossDomainWindowType,\n    name : string,\n    data : ?Object,\n    options? : RegularRequestOptionsType\n) => ZalgoPromise<ResponseMessageEvent>;\n\ntype FireAndForgetSendType = (\n    win : CrossDomainWindowType,\n    name : string,\n    data : ?Object,\n    options? : FireAndForgetRequestOptionsType\n) => ZalgoPromise<void>;\n\nexport type SendType = RegularSendType & FireAndForgetSendType;\n\nexport type MessageEvent = {|\n    source : CrossDomainWindowType,\n    origin : string,\n    data : string\n|};\n\n// eslint-disable-next-line flowtype/require-exact-type\nexport type CrossDomainFunctionType<A, R> = {\n    (...args : A) : ZalgoPromise<R>,\n    fireAndForget : (...args : A) => ZalgoPromise<void>,\n    __id__? : string,\n    __name__? : string\n};\n\nexport type ReceiveMessageType = (MessageEvent, { on : OnType, send : SendType }) => void;\n"],"sourceRoot":""}